<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lihq - Blog</title>
  
  <subtitle>Lihq</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.lihq.xyz/"/>
  <updated>2020-08-19T10:28:28.424Z</updated>
  <id>https://blog.lihq.xyz/</id>
  
  <author>
    <name>Lihq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ 初体验</title>
    <link href="https://blog.lihq.xyz/2020/08/13/rabbitmq-first-experience/"/>
    <id>https://blog.lihq.xyz/2020/08/13/rabbitmq-first-experience/</id>
    <published>2020-08-13T13:39:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="RabbitMQ-初体验"><a href="#RabbitMQ-初体验" class="headerlink" title="RabbitMQ 初体验"></a>RabbitMQ 初体验</h1><h3 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h3><ul><li><p>MQ是 message queue 的简称，是应用程序和应用程序之间通信的方法。</p></li><li><p>RabbitMQ是一个由erlang语言编写的、开源的、在AMQP基础上完整的、可复用的企业消息系统。支持多种语言，包括java、Python、ruby、PHP、C/C++等。</p></li><li><p>AMQP：advanced message queuing protocol ，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息并不受客户端/中间件不同产品、不同开发语言等条件的限制。</p></li><li><p>实用优点：应用解耦，流量削峰，异步处理</p></li></ul><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><ul><li><a href="https://hub.docker.com/_/rabbitmq" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq</a></li></ul><p>自从有了docker，妈妈再也不担心我安装软件啦</p><p>为了方便管理docker容器，我们采用compose的方式运行</p><blockquote><p>tips: management版本是带web管理工具的</p></blockquote><h4 id="1、超级简单版本"><a href="#1、超级简单版本" class="headerlink" title="1、超级简单版本"></a>1、超级简单版本</h4><h6 id="一键启动"><a href="#一键启动" class="headerlink" title="一键启动"></a>一键启动</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER&#x3D;guest -e RABBITMQ_DEFAULT_PASS&#x3D;guest -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure></div><h4 id="2、看起来好看版本"><a href="#2、看起来好看版本" class="headerlink" title="2、看起来好看版本"></a>2、看起来好看版本</h4><h6 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    image: rabbitmq:management</span><br><span class="line">    container_name: rabbitmq</span><br><span class="line">    hostname: myrabbitmq</span><br><span class="line">    ports:</span><br><span class="line">      - 15672:15672</span><br><span class="line">      - 5672:5672</span><br><span class="line">    environment:</span><br><span class="line">      - RABBITMQ_DEFAULT_USER&#x3D;guest</span><br><span class="line">      - RABBITMQ_DEFAULT_PASS&#x3D;guest</span><br><span class="line">    restart: always</span><br><span class="line">    # 里面的&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie 需要600权限</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;data:&#x2F;var&#x2F;lib&#x2F;rabbitmq</span><br></pre></td></tr></table></figure></div><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div><h6 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h6><ol><li>docker ps 查看状态</li><li>访问 localhost:15762 查看web管理页面</li></ol><h6 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure></div><h3 id="尝试实用"><a href="#尝试实用" class="headerlink" title="尝试实用"></a>尝试实用</h3><blockquote><p>官方文档：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p></blockquote><h5 id="1、Hello-World"><a href="#1、Hello-World" class="headerlink" title="1、Hello World"></a>1、<a href="https://www.rabbitmq.com/tutorials/tutorial-one-php.html" target="_blank" rel="noopener">Hello World</a></h5><blockquote><p>单发送单接收：简单的发送与接收，没有特别的处理</p></blockquote><p><a href="https://www.rabbitmq.com/img/tutorials/python-one.png" data-fancybox="group" data-caption="python-one" class="fancybox"><img alt="python-one" title="python-one" data-src="https://www.rabbitmq.com/img/tutorials/python-one.png" class="lazyload"></a></p><p>代码示例</p><h6 id="send-php"><a href="#send-php" class="headerlink" title="send.php"></a>send.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 连接RabbitMQ</span><br><span class="line">$connection &#x3D; new \PhpAmqpLib\Connection\AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建一个通道</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line">&#x2F;&#x2F; 声明一个队列</span><br><span class="line">$channel-&gt;queue_declare(&#39;hello&#39;, false, false, false, false);</span><br><span class="line"></span><br><span class="line">$msg &#x3D; new \PhpAmqpLib\Message\AMQPMessage(&#39;Hello World&#39;);</span><br><span class="line">$channel-&gt;basic_publish($msg, &#39;&#39;, &#39;hello&#39;);</span><br><span class="line"></span><br><span class="line">echo &quot; [x] Sent &#39;Hello World!&#39;\n&quot;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><h6 id="receive-php"><a href="#receive-php" class="headerlink" title="receive.php"></a>receive.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 连接RabbitMQ</span><br><span class="line">$connection &#x3D; new \PhpAmqpLib\Connection\AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建一个通道</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line">&#x2F;&#x2F; 声明一个队列</span><br><span class="line">$channel-&gt;queue_declare(&#39;hello&#39;, false, false, false, false);</span><br><span class="line"></span><br><span class="line">echo &#39; [*] Waiting for messages. To exit press CTRL+C&#39;, &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$callback &#x3D; function ($msg) &#123;</span><br><span class="line">    echo &quot; [x] Received &quot;, $msg-&gt;body, &quot;\n&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume(&#39;hello&#39;, &#39;&#39;, false, true, false, false, $callback);</span><br><span class="line"></span><br><span class="line">while (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发送测试：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php HelloWord&#x2F;send.php</span><br><span class="line"> [x] Sent &#39;Hello World!&#39;</span><br></pre></td></tr></table></figure></div><p>接受测试：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ php HelloWord&#x2F;receive.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br><span class="line"> [x] Received Hello World</span><br></pre></td></tr></table></figure></div><h5 id="2、Work-queues"><a href="#2、Work-queues" class="headerlink" title="2、Work queues"></a>2、Work queues</h5><blockquote><p>单发送多接收：一个发送端，多个接收端，如分布式的任务派发</p></blockquote><p><a href="https://www.rabbitmq.com/img/tutorials/python-two.png" data-fancybox="group" data-caption="python-two" class="fancybox"><img alt="python-two" title="python-two" data-src="https://www.rabbitmq.com/img/tutorials/python-two.png" class="lazyload"></a></p><h6 id="new-task-php"><a href="#new-task-php" class="headerlink" title="new_task.php"></a>new_task.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">use PhpAmqpLib\Message\AMQPMessage;</span><br><span class="line"></span><br><span class="line">$connection &#x3D; new \PhpAmqpLib\Connection\AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$channel-&gt;queue_declare(&#39;task_queue&#39;, false, true, false, false);</span><br><span class="line"></span><br><span class="line">$data &#x3D; implode(&#39; &#39;, array_slice($argv, 1));</span><br><span class="line">if (empty($data)) &#123;</span><br><span class="line">    $data &#x3D; &quot;Hello World!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$msg &#x3D; new AMQPMessage(</span><br><span class="line">    $data,</span><br><span class="line">    [</span><br><span class="line">        &#39;delivery_mode&#39; &#x3D;&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_publish($msg, &#39;&#39;, &#39;task_queue&#39;);</span><br><span class="line"></span><br><span class="line">echo &#39;[x] Sent &#39;, $data, &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><h6 id="worker-php"><a href="#worker-php" class="headerlink" title="worker.php"></a>worker.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 连接RabbitMQ</span><br><span class="line">$connection &#x3D; new \PhpAmqpLib\Connection\AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建一个通道</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line">&#x2F;&#x2F; 声明一个队列</span><br><span class="line">$channel-&gt;queue_declare(&#39;task_queue&#39;, false, true, false, false);</span><br><span class="line"></span><br><span class="line">echo &quot; [*] Waiting for messages. To exit press CTRL+C\n&quot;;</span><br><span class="line"></span><br><span class="line">$callback &#x3D; function ($msg) &#123;</span><br><span class="line">    echo &#39; [x] Received &#39;, $msg-&gt;body, &quot;\n&quot;;</span><br><span class="line">    &#x2F;&#x2F; 假装耗时任务，一个.代表1秒</span><br><span class="line">    sleep(substr_count($msg-&gt;body, &#39;.&#39;));</span><br><span class="line">    echo &quot; [x] Done\n&quot;;</span><br><span class="line">    &#x2F;&#x2F; 消费者发送回一个确认</span><br><span class="line">    $msg-&gt;delivery_info[&#39;channel&#39;]-&gt;basic_ack($msg-&gt;delivery_info[&#39;delivery_tag&#39;]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_qos(null, 1, null);</span><br><span class="line">$channel-&gt;basic_consume(&#39;task_queue&#39;, &#39;&#39;, false, false, false, false, $callback);</span><br><span class="line"></span><br><span class="line">while ($channel-&gt;is_consuming()) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><p>开启两个worker：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php WorkQueues&#x2F;worker.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php WorkQueues&#x2F;worker.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br></pre></td></tr></table></figure></div><p>发送任务：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php WorkQueues&#x2F;new_task.php &quot;第一个任务耗时5秒.....&quot;</span><br><span class="line"> [x] Sent 第一个任务耗时5秒.....</span><br><span class="line">$ php WorkQueues&#x2F;new_task.php &quot;第二个任务耗时5秒.....&quot;</span><br><span class="line"> [x] Sent 第二个任务耗时5秒.....</span><br></pre></td></tr></table></figure></div><p>这时候第1个worker开始工作，第2个任务进来之后，就循环顺延到下一个worker</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php WorkQueues&#x2F;worker.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br><span class="line"> [x] Received 第一个任务耗时5秒.....</span><br><span class="line"> [x] Done</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php WorkQueues&#x2F;worker.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br><span class="line"> [x] Received 第二个任务耗时5秒.....</span><br><span class="line"> [x] Done</span><br></pre></td></tr></table></figure></div><h5 id="3、Publish-Subscribe"><a href="#3、Publish-Subscribe" class="headerlink" title="3、Publish/Subscribe"></a>3、Publish/Subscribe</h5><blockquote><p>发布/订阅模式：发送端发送广播消息，多个接收端接收</p></blockquote><p><a href="https://www.rabbitmq.com/img/tutorials/python-three.png" data-fancybox="group" data-caption="python-three" class="fancybox"><img alt="python-three" title="python-three" data-src="https://www.rabbitmq.com/img/tutorials/python-three.png" class="lazyload"></a></p><h6 id="receive-logs-php"><a href="#receive-logs-php" class="headerlink" title="receive_logs.php"></a>receive_logs.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">use PhpAmqpLib\Connection\AMQPStreamConnection;</span><br><span class="line"></span><br><span class="line">$connection &#x3D; new AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$channel-&gt;exchange_declare(&#39;logs&#39;, &#39;fanout&#39;, false, false, false);</span><br><span class="line"></span><br><span class="line">list($queue_name, ,) &#x3D; $channel-&gt;queue_declare(&quot;&quot;, false, false, true, false);</span><br><span class="line"></span><br><span class="line">$channel-&gt;queue_bind($queue_name, &#39;logs&#39;);</span><br><span class="line"></span><br><span class="line">echo &quot; [*] Waiting for logs. To exit press CTRL+C\n&quot;;</span><br><span class="line"></span><br><span class="line">$callback &#x3D; function ($msg) &#123;</span><br><span class="line">    echo &#39; [x] &#39;, $msg-&gt;body, &quot;\n&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume($queue_name, &#39;&#39;, false, true, false, false, $callback);</span><br><span class="line"></span><br><span class="line">while ($channel-&gt;is_consuming()) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><h6 id="emit-log-php"><a href="#emit-log-php" class="headerlink" title="emit_log.php"></a>emit_log.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">use PhpAmqpLib\Connection\AMQPStreamConnection;</span><br><span class="line">use PhpAmqpLib\Message\AMQPMessage;</span><br><span class="line"></span><br><span class="line">$connection &#x3D; new AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$channel-&gt;exchange_declare(&#39;logs&#39;, &#39;fanout&#39;, false, false, false);</span><br><span class="line"></span><br><span class="line">$data &#x3D; implode(&#39; &#39;, array_slice($argv, 1));</span><br><span class="line">if (empty($data)) &#123;</span><br><span class="line">    $data &#x3D; &quot;info: Hello World!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$msg &#x3D; new AMQPMessage($data);</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_publish($msg, &#39;logs&#39;);</span><br><span class="line"></span><br><span class="line">echo &#39; [x] Sent &#39;, $data, &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><p>开启两个消费者：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php PublishSubscribe&#x2F;receive_logs1.php</span><br><span class="line"> [*] Waiting for logs. To exit press CTRL+C</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php PublishSubscribe&#x2F;receive_logs2.php</span><br><span class="line"> [*] Waiting for logs. To exit press CTRL+C</span><br></pre></td></tr></table></figure></div><p>发送任务：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php PublishSubscribe&#x2F;emit_log.php &quot;创建日志&quot;</span><br><span class="line"> [x] Sent 创建日志</span><br></pre></td></tr></table></figure></div><p>这时候生产者讲任务推给了交换机，由交换机将数据发送给与之绑定的队列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ php PublishSubscribe&#x2F;receive_logs1.php</span><br><span class="line"> [*] Waiting for logs. To exit press CTRL+C</span><br><span class="line"> [x] 创建日志</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ php PublishSubscribe&#x2F;receive_logs2.php</span><br><span class="line"> [*] Waiting for logs. To exit press CTRL+C</span><br><span class="line"> [x] 创建日志</span><br></pre></td></tr></table></figure></div><p>简单解释：可以将消息发送给不同类型的消费者。做到发布一次，消费多个</p><ul><li><input disabled type="checkbox"> <strong>todo 下面的介绍，留住后面慢慢消化一下</strong></li></ul><h5 id="4、Routing"><a href="#4、Routing" class="headerlink" title="4、Routing"></a>4、Routing</h5><blockquote><p>按路线发送接收：发送端按routing key发送消息，不同的接收端按不同的routing key接收消息。</p></blockquote><p><a href="https://www.rabbitmq.com/img/tutorials/python-four.png" data-fancybox="group" data-caption="python-four" class="fancybox"><img alt="python-four" title="python-four" data-src="https://www.rabbitmq.com/img/tutorials/python-four.png" class="lazyload"></a></p><h5 id="5、Topics"><a href="#5、Topics" class="headerlink" title="5、Topics"></a>5、Topics</h5><blockquote><p>topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中</p></blockquote><p><a href="https://www.rabbitmq.com/img/tutorials/python-five.png" data-fancybox="group" data-caption="python-five" class="fancybox"><img alt="python-five" title="python-five" data-src="https://www.rabbitmq.com/img/tutorials/python-five.png" class="lazyload"></a></p><h5 id="6、RPC"><a href="#6、RPC" class="headerlink" title="6、RPC"></a>6、RPC</h5><p><a href="https://www.rabbitmq.com/img/tutorials/python-six.png" data-fancybox="group" data-caption="python-six" class="fancybox"><img alt="python-six" title="python-six" data-src="https://www.rabbitmq.com/img/tutorials/python-six.png" class="lazyload"></a></p><blockquote><p>实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用）。</p></blockquote><h5 id="7、Publisher-Confirms"><a href="#7、Publisher-Confirms" class="headerlink" title="7、Publisher Confirms"></a>7、Publisher Confirms</h5><blockquote><p>发布者确认 是实现可靠发布的RabbitMQ扩展。在通道上启用发布者确认后，代理将异步确认客户端发布的消息，这意味着它们已在服务器端处理。</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p><a href="https://github.com/lihq1403/gadget/tree/master/RabbitMQ" target="_blank" rel="noopener">https://github.com/lihq1403/gadget/tree/master/RabbitMQ</a></p><h3 id="延时队列实现"><a href="#延时队列实现" class="headerlink" title="延时队列实现"></a>延时队列实现</h3><p>Rabbitmq默认没有支持延迟队列，查阅了一些资料发现，是可以通过两种方式实现</p><ol><li>TTL和死信队列</li><li><a href="rabbitmq/rabbitmq-delayed-message-exchange">rabbitmq_delayed_message_exchange</a> 插件</li></ol><h5 id="TTL和死信队列实现方式"><a href="#TTL和死信队列实现方式" class="headerlink" title="TTL和死信队列实现方式"></a>TTL和死信队列实现方式</h5><blockquote><p>参考文章：<a href="https://blog.csdn.net/u011069013/article/details/107079470/" target="_blank" rel="noopener">https://blog.csdn.net/u011069013/article/details/107079470/</a></p></blockquote><h6 id="send-php-1"><a href="#send-php-1" class="headerlink" title="send.php"></a>send.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">use PhpAmqpLib\Connection\AMQPStreamConnection;</span><br><span class="line">use PhpAmqpLib\Wire\AMQPTable;</span><br><span class="line">use PhpAmqpLib\Message\AMQPMessage;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 连接RabbitMQ</span><br><span class="line">$connection &#x3D; new AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建一个通道</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$exchange_name &#x3D; &#39;test_exchange&#39;;</span><br><span class="line">$queue_name    &#x3D; &#39;test_queue&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义默认的交换器</span><br><span class="line">$channel-&gt;exchange_declare($exchange_name, &#39;topic&#39;, false, true, false);</span><br><span class="line">&#x2F;&#x2F; 定义延迟交换器</span><br><span class="line">$channel-&gt;exchange_declare(&#39;delayed_exchange&#39;, &#39;topic&#39;, false, true, false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义延迟队列</span><br><span class="line">$channel-&gt;queue_declare(&#39;delayed_queue&#39;, false, true, false, false, false, new AMQPTable(array(</span><br><span class="line">    &quot;x-dead-letter-exchange&quot;    &#x3D;&gt; &quot;delayed_exchange&quot;,</span><br><span class="line">    &quot;x-dead-letter-routing-key&quot; &#x3D;&gt; &quot;delayed_exchange&quot;,</span><br><span class="line">    &quot;x-message-ttl&quot;             &#x3D;&gt; 5000, &#x2F;&#x2F;5秒延迟</span><br><span class="line">)));</span><br><span class="line">&#x2F;&#x2F;绑定延迟队列到默认队列上</span><br><span class="line">$channel-&gt;queue_bind(&#39;delayed_queue&#39;, $exchange_name);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 声明一个队列</span><br><span class="line">$channel-&gt;queue_declare($queue_name, false, true, false, false, false);</span><br><span class="line">&#x2F;&#x2F;绑定正常消费队列到延迟交换器上</span><br><span class="line">$channel-&gt;queue_bind($queue_name, &#39;delayed_exchange&#39;, &#39;delayed_exchange&#39;);</span><br><span class="line"></span><br><span class="line">$nowTime &#x3D; date(&#39;H:i:s&#39;);</span><br><span class="line">$msg &#x3D; new AMQPMessage(&#39;Hello World 发送时间：&#39;. $nowTime, [</span><br><span class="line">    &#39;delivery_mode&#39; &#x3D;&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT</span><br><span class="line">]);</span><br><span class="line">$channel-&gt;basic_publish($msg, $exchange_name);</span><br><span class="line"></span><br><span class="line">echo &quot; [x] Sent &#39;Hello World!&#39;\n&quot;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></div><h6 id="receive-php-1"><a href="#receive-php-1" class="headerlink" title="receive.php"></a>receive.php</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once __DIR__ . &#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 连接RabbitMQ</span><br><span class="line">$connection &#x3D; new \PhpAmqpLib\Connection\AMQPStreamConnection(&#39;localhost&#39;, 5672, &#39;guest&#39;, &#39;guest&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建一个通道</span><br><span class="line">$channel &#x3D; $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$queue_name &#x3D; &#39;test_queue&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 声明一个队列</span><br><span class="line">$channel-&gt;queue_declare($queue_name, false, true, false, false, false);</span><br><span class="line"></span><br><span class="line">echo &#39; [*] Waiting for messages. To exit press CTRL+C&#39;, &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$callback &#x3D; function ($msg) &#123;</span><br><span class="line">    echo &quot; [x] Received &quot;, $msg-&gt;body, &#39; 接受时间：&#39;, date(&#39;H:i:s&#39;), &quot;\n&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume($queue_name, &#39;&#39;, false, true, false, false, $callback);</span><br><span class="line"></span><br><span class="line">while (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发送测试：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php HelloWord&#x2F;send.php</span><br><span class="line"> [x] Sent &#39;Hello World!&#39;</span><br></pre></td></tr></table></figure></div><p>接受测试：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ php HelloWord&#x2F;receive.php</span><br><span class="line"> [*] Waiting for messages. To exit press CTRL+C</span><br><span class="line"> [x] Received Hello World 发送时间：21:19:06 接受时间：21:19:11</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>PHP 扩展包开发流程</title>
    <link href="https://blog.lihq.xyz/2020/05/09/php-extension-package-development-process/"/>
    <id>https://blog.lihq.xyz/2020/05/09/php-extension-package-development-process/</id>
    <published>2020-05-09T09:51:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PHP-扩展包开发流程"><a href="#PHP-扩展包开发流程" class="headerlink" title="PHP 扩展包开发流程"></a>PHP 扩展包开发流程</h1><blockquote><p>现在程序开发，应该很少人再去造轮子吧，直接github一顿搜，哈哈哈哈。<br>难免有时候会找不到或者不适合，刚好又碰巧这些代码很通用，那么我们不妨自己开发一个轮子 ( 手动狗头 0-0 )</p></blockquote><h3 id="composer安装"><a href="#composer安装" class="headerlink" title="composer安装"></a>composer安装</h3><ul><li><a href="https://blog.lihq.xyz/2020/01/03/composer-graphic-installation-tutorial/tps://note.youdao.com/">Composer 图文安装教程</a></li></ul><h3 id="拓展包的基础结构"><a href="#拓展包的基础结构" class="headerlink" title="拓展包的基础结构"></a>拓展包的基础结构</h3><p>虽然说扩展包并没有什么强制的规定一定要如何组织代码，但是我们推荐根据业界约定俗成的结构：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">helper&#x2F;</span><br><span class="line">├── .editorconfig      # 编辑器配置文件，比如缩进大小、换行模式等</span><br><span class="line">├── .gitattributes     # git 配置文件，可以设计导出时忽略文件等</span><br><span class="line">├── .gitignore         # git 忽略文件配置列表</span><br><span class="line">├── .php_cs            # PHP-CS-Fixer 配置文件</span><br><span class="line">├── README.md</span><br><span class="line">├── composer.json      # 包定义，很关键</span><br><span class="line">├── phpunit.xml.dist</span><br><span class="line">├── src                # 源码</span><br><span class="line">│   └── .gitkeep</span><br><span class="line">└── tests              # 单元测试</span><br><span class="line">    └── .gitkeep</span><br></pre></td></tr></table></figure></div><h3 id="包构建工具"><a href="#包构建工具" class="headerlink" title="包构建工具"></a>包构建工具</h3><p>我这里使用的是<a href="https://github.com/overtrue/package-builder" target="_blank" rel="noopener">overtrue/package-builder</a>提供的一个包结构生成工具</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer global require &quot;overtrue&#x2F;package-builder&quot; --prefer-source</span><br></pre></td></tr></table></figure></div><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> $ package-builder help</span><br><span class="line">如果命令未找到，那就在composer全局vendor里面啦！这个是我的：&#x2F;root&#x2F;.config&#x2F;composer&#x2F;vendor&#x2F;overtrue&#x2F;package-builder&#x2F;bin&#x2F;package-builder</span><br></pre></td></tr></table></figure></div><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ package-builder build helper</span><br></pre></td></tr></table></figure></div><h3 id="声明自动加载"><a href="#声明自动加载" class="headerlink" title="声明自动加载"></a>声明自动加载</h3><blockquote><p>tips：一般自动加载有改动的话，最好重新生成一次composer dump-autoload 或者 composer du </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Lihq1403\\Helper\\&quot;: &quot;src&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="完成代码开发，单元测试"><a href="#完成代码开发，单元测试" class="headerlink" title="完成代码开发，单元测试"></a>完成代码开发，单元测试</h3><ul><li><a href="https://github.com/lihq1403/helper" target="_blank" rel="noopener">lihq1403/helper</a></li></ul><p>最后的composer.json如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;lihq1403\&#x2F;helper&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;helper&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;lihq1403&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;lihqing1403@gmail.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;&gt;&#x3D;7.0.0&quot;,</span><br><span class="line">        &quot;ext-json&quot;: &quot;*&quot;,</span><br><span class="line">        &quot;larapack&#x2F;dd&quot;: &quot;^1.1&quot;,</span><br><span class="line">        &quot;phpoffice&#x2F;phpspreadsheet&quot;: &quot;^1.10&quot;,</span><br><span class="line">        &quot;ext-iconv&quot;: &quot;*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;require-dev&quot;: &#123;</span><br><span class="line">        &quot;phpunit&#x2F;phpunit&quot;: &quot;^8.3&quot;,</span><br><span class="line">        &quot;mockery&#x2F;mockery&quot;: &quot;^1.2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Lihq1403\\Helper\\&quot;: &quot;src&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;files&quot;: [</span><br><span class="line">            &quot;src&#x2F;common.php&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="本地项目测试扩展包"><a href="#本地项目测试扩展包" class="headerlink" title="本地项目测试扩展包"></a>本地项目测试扩展包</h3><p>建立测试项目，目录结构如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir&#x2F;</span><br><span class="line">├── helper           # 扩展包</span><br><span class="line">└── helper-test      # 测试项目</span><br></pre></td></tr></table></figure></div><p>进入测试目录之后</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 需要先初始化 composer.json, 一路回车即可</span><br><span class="line">$ composer init  </span><br><span class="line"></span><br><span class="line"># 配置包路径，注意，这里 &#96;..&#x2F;helper&#96; 为相对路径，不要弄错了</span><br><span class="line">$ composer config repositories.helper path ..&#x2F;helper    </span><br><span class="line"></span><br><span class="line"># 安装扩展包  这里  &#96;dev-master&#96;  中的 dev 指该分支下最新的提交，master 是指定的包中的分支名</span><br><span class="line">$ composer require lihq1403&#x2F;helper:dev-master</span><br></pre></td></tr></table></figure></div><blockquote><p>小细节：本地composer安装，会创建一个软链接 vendor/lihq1403/helper 到包所在目录 ../helper，这样一来，你可以直接在测试项目的 vendor/lihq1403/helper 下修改文件，包里的文件也会跟着变了</p></blockquote><p>建立测试文件 index.php</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require __DIR__ . &#39;&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">use Lihq1403\Helper\Interfaces\DateGlobal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo DateGlobal::SECONDS_IN_A_DAY;</span><br></pre></td></tr></table></figure></div><p>测试一下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php index.php</span><br><span class="line">86400</span><br></pre></td></tr></table></figure></div><p>达到预期结果，完美！！！</p><h3 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h3><ol><li>将本地代码放到github上面 <del>（不会真有人不会提交代码到github吧）</del></li></ol><p><a href="https://blog-1256184194.file.myqcloud.com/2020/05/09/17a7a4f2afc61.png" data-fancybox="group" data-caption="微信截图_20200509173401.png" class="fancybox"><img alt="微信截图_20200509173401.png" title="微信截图_20200509173401.png" data-src="https://blog-1256184194.file.myqcloud.com/2020/05/09/17a7a4f2afc61.png" class="lazyload"></a></p><ol start="2"><li>提交到 Packagist</li></ol><p><a href="https://blog-1256184194.file.myqcloud.com/2020/05/09/c19fd205d7077.png" data-fancybox="group" data-caption="微信截图_20200509173554.png" class="fancybox"><img alt="微信截图_20200509173554.png" title="微信截图_20200509173554.png" data-src="https://blog-1256184194.file.myqcloud.com/2020/05/09/c19fd205d7077.png" class="lazyload"></a></p><ol start="3"><li>启用项目的 Packagist 通知服务</li></ol><p>访问你在 Packagist 的个人主页：packagist.org/profile/ ，点击 “Show API Token”，复制 token 备用。</p><ol start="4"><li>给项目代码库启用 Packagist 通知服务<br>填写对应的内容：</li></ol><ul><li>Payload URL: <a href="https://packagist.org/api/github?username=Packagist" target="_blank" rel="noopener">https://packagist.org/api/github?username=Packagist</a> 的用户名</li><li>Content type 选择为 application/json</li><li>Secret 填写为您刚刚复制的 token<br><a href="https://blog-1256184194.file.myqcloud.com/2020/05/09/2953629f1341d.png" data-fancybox="group" data-caption="微信截图_20200509173816.png" class="fancybox"><img alt="微信截图_20200509173816.png" title="微信截图_20200509173816.png" data-src="https://blog-1256184194.file.myqcloud.com/2020/05/09/2953629f1341d.png" class="lazyload"></a></li></ul><h3 id="发布第一个版本"><a href="#发布第一个版本" class="headerlink" title="发布第一个版本"></a>发布第一个版本</h3><h5 id="版本号约定"><a href="#版本号约定" class="headerlink" title="版本号约定"></a>版本号约定</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">版本格式：主版本号。次版本号。修订号，版本号递增规则如下：</span><br><span class="line">主版本号：当你做了不兼容的 API 修改，</span><br><span class="line">次版本号：当你做了向下兼容的功能性新增，</span><br><span class="line">修订号：当你做了向下兼容的问题修正。</span><br><span class="line">先行版本号及版本编译信息可以加到 “主版本号。次版本号。修订号” 的后面，作为延伸。</span><br></pre></td></tr></table></figure></div><p>简单介绍就是，如果你现在的最新版本是 1.0.0，下面的动作的区别是：</p><ul><li>打补丁，修了一些小 bug，没做 API 修改，那么你应该发布 1.0.1，同理以后也是递增第三位。</li><li>有一天网友在你的基础上提交了新功能，原来的 API 调用方式也没改变，这时候你应该发布 1.1.0 。</li><li>一段时间以后，你心血来潮重构了你的扩展包，调用方式也发生了变化，也就是说安装了以前版本的是无法直接升级的，这时候你需要发布 2.0.0 了。</li></ul><h5 id="Create-new-release"><a href="#Create-new-release" class="headerlink" title="Create new release"></a>Create new release</h5><p>填写版本号、这次发版的标题、以及这次版本变化的内容描述，点击提交。</p><h3 id="发布成功之后的测试"><a href="#发布成功之后的测试" class="headerlink" title="发布成功之后的测试"></a>发布成功之后的测试</h3><p>在新项目里面直接composer require lihq1403/helper，问题不大的话（国内镜像会有延迟），应该能看到安装成功</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果这个开发的包，是一些比较私有的话，建议自己搭建一个私有的 Composer 包仓库</p><ul><li><a href="https://blog.lihq.xyz/2019/12/25/Using-satis-to-build-a-private-composer-package-warehouse/">使用 satis 搭建一个私有的 Composer 包仓库</a></li></ul><h3 id="helper源码地址"><a href="#helper源码地址" class="headerlink" title="helper源码地址"></a>helper源码地址</h3><div style="text-align: center">  <div class="github-card" data-user="lihq1403" data-repo="helper" data-height="200" data-width="100%" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script><p><a href="https://media-1256184194.file.myqcloud.com/image/bing/2020-05-07-5eb3d1968cd06.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://media-1256184194.file.myqcloud.com/image/bing/2020-05-07-5eb3d1968cd06.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>神奇的轮子之 - snappy</title>
    <link href="https://blog.lihq.xyz/2020/03/10/magic-wheel-snappy/"/>
    <id>https://blog.lihq.xyz/2020/03/10/magic-wheel-snappy/</id>
    <published>2020-03-10T09:31:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="神奇的轮子之-snappy"><a href="#神奇的轮子之-snappy" class="headerlink" title="神奇的轮子之 - snappy"></a>神奇的轮子之 - snappy</h1><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><ul><li>因为项目中，需要将多张图片和文字进行拼接生成图片，一开始用GD库，果然难用，哈哈哈</li><li>经过不断的努力搜索，发现了神器<a href="https://wkhtmltopdf.org/" target="_blank" rel="noopener">wkhtmltoimage</a></li><li>原来可以先写好静态html，直接进行转换就好了</li><li>但是这个是一个shell脚本，php调用的话，已经有人写好了轮子 <a href="https://github.com/KnpLabs/snappy" target="_blank" rel="noopener">knplabs/knp-snappy</a>【pdf和image统统不在话下】</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require knplabs&#x2F;knp-snappy</span><br></pre></td></tr></table></figure></div><p>选择安装脚本，直接引用官方说明</p><h2 id="wkhtmltopdf-binary-as-composer-dependencies"><a href="#wkhtmltopdf-binary-as-composer-dependencies" class="headerlink" title="wkhtmltopdf binary as composer dependencies"></a>wkhtmltopdf binary as composer dependencies</h2><p>If you want to download wkhtmltopdf and wkhtmltoimage with composer you add to <code>composer.json</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ composer require h4cc/wkhtmltopdf-i386 0.12.x</span><br><span class="line">$ composer require h4cc/wkhtmltoimage-i386 0.12.x</span><br></pre></td></tr></table></figure></div><p>or this if you are in 64 bit based system:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ composer require h4cc/wkhtmltopdf-amd64 0.12.x</span><br><span class="line">$ composer require h4cc/wkhtmltoimage-amd64 0.12.x</span><br></pre></td></tr></table></figure></div><p>And then you can use it</p><p>我这里选择了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require h4cc&#x2F;wkhtmltoimage-amd64</span><br></pre></td></tr></table></figure></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require __DIR__ .&#39;&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 首先实例类，根据系统不同，选择不一样的脚本程序</span><br><span class="line"></span><br><span class="line">$imageSnappy &#x3D; new \Knp\Snappy\Image(__DIR__ . &#39;&#x2F;vendor&#x2F;h4cc&#x2F;wkhtmltoimage-amd64&#x2F;bin&#x2F;wkhtmltoimage-amd64&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果有中文的话，需要添加中文字体</span><br><span class="line">$ttf &#x3D; __DIR__ . &#39;&#x2F;ttf&#x2F;sc.ttf&#39;;</span><br><span class="line">&#x2F;&#x2F; 需要合成的图片地址，base64也可以的，其实跟这个也无关，主要是html能静态展示，那么合成的就是什么样的</span><br><span class="line">$image_url &#x3D; &#39;https:&#x2F;&#x2F;www.php.net&#x2F;images&#x2F;logos&#x2F;php-logo.svg&#39;;</span><br><span class="line">$name &#x3D; &#39;wkhtmltoimage&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; html代码，随意搞了搞，真实使用的话，需要用心调整样式哦~</span><br><span class="line">$htmlTemplate &#x3D; &lt;&lt;&lt;EOF</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;海报&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @font-face &#123;</span><br><span class="line">        font-family: myFirstFont;</span><br><span class="line">        src: url(&#39;&#123;$ttf&#125;&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">        font-family: myFirstFont;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;&#123;$image_url&#125;&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;$name&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line">$output &#x3D; __DIR__ . &#39;&#x2F;demo&#x2F;&#39;.time().&#39;.jpg&#39;;</span><br><span class="line">$imageSnappy-&gt;generateFromHtml($htmlTemplate, $output);</span><br><span class="line"></span><br><span class="line">echo &#39;ok&#39;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Composer 图文安装教程</title>
    <link href="https://blog.lihq.xyz/2020/01/03/composer-graphic-installation-tutorial/"/>
    <id>https://blog.lihq.xyz/2020/01/03/composer-graphic-installation-tutorial/</id>
    <published>2020-01-03T05:58:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Composer-图文安装教程"><a href="#Composer-图文安装教程" class="headerlink" title="Composer 图文安装教程"></a>Composer 图文安装教程</h1><h1 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h1><ul><li><a href="https://learnku.com/articles/38982" target="_blank" rel="noopener">傻瓜都会的 Composer 图文安装教程</a></li><li><a href="https://learnku.com/articles/30258" target="_blank" rel="noopener">Composer 国内全量镜像大全</a></li></ul><blockquote><p>Composer 不是一个包管理器，不同于python的pi,nodejs的npm，它是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。<br>为什么要是用composer呢，或者它有哪些好处呢？它使代码模块化，提高代码的复用性，另外还提供自动加载等。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行 Composer 需要 PHP 5.3.2+ 以上版本，composer 支持windows、linux等多平台。</p><h4 id="linux上安装"><a href="#linux上安装" class="headerlink" title="linux上安装"></a>linux上安装</h4><p>1、执行php -v 查看PHP版本</p><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/sbqZsYqcx3.png!large" data-fancybox="group" data-caption="l1HWQA" class="fancybox"><img alt="l1HWQA" title="l1HWQA" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/sbqZsYqcx3.png!large" class="lazyload"></a></p><p>2、执行以下命令进行全局安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https:<span class="comment">//getcomposer.org/installer | php</span></span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/frQArxJQWr.png!large" data-fancybox="group" data-caption="l1H6iD" class="fancybox"><img alt="l1H6iD" title="l1H6iD" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/frQArxJQWr.png!large" class="lazyload"></a></p><blockquote><p><code>composer.phar</code> 是 Composer 的二进制文件。这是一个 PHAR 包（PHP 的归档），这是 PHP 的归档格式可以帮助用户在命令行中执行一些操作</p></blockquote><p>3、查看是否安装成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三选一</span></span><br><span class="line">composer</span><br><span class="line">composer -V</span><br><span class="line">composer --version</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/fbcukm1BYX.png!large" data-fancybox="group" data-caption="l1HHJg" class="fancybox"><img alt="l1HHJg" title="l1HHJg" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/fbcukm1BYX.png!large" class="lazyload"></a></p><p>4、全局修改<code>composer</code>镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置中国全量镜像，推荐使用阿里云镜像</span></span><br><span class="line">composer config -g repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com </span></span><br><span class="line"><span class="comment">//查看配置是否成功</span></span><br><span class="line">composer config -gl</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/tjo0TxuitJ.png!large" data-fancybox="group" data-caption="l1OY01" class="fancybox"><img alt="l1OY01" title="l1OY01" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/tjo0TxuitJ.png!large" class="lazyload"></a></p><p>5、当某些不可抗因素导致原镜像不能正常使用的时候，切换composer镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、切换源</span></span><br><span class="line">composer config -g repo.packagist composer https:<span class="comment">//mirrors.aliyun.com/composer/ </span></span><br><span class="line"><span class="comment">//2、清除所有 package 缓存（此步奏选泽性操作）</span></span><br><span class="line">composer clear-cache</span><br><span class="line"><span class="comment">//3、查看配置是否成功</span></span><br><span class="line">composer config -gl</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/MKpKL7mgHw.png!large" data-fancybox="group" data-caption="l1XUDs" class="fancybox"><img alt="l1XUDs" title="l1XUDs" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/MKpKL7mgHw.png!large" class="lazyload"></a></p><p>6、如果需要解除镜像并恢复到 packagist 官方源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --<span class="keyword">unset</span> repos.packagist</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/39imVJCkDE.png!large" data-fancybox="group" data-caption="l1vFSO" class="fancybox"><img alt="l1vFSO" title="l1vFSO" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/39imVJCkDE.png!large" class="lazyload"></a></p><p>7、composer升级 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">self</span>-update</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/ccu84I4Z0d.png!large" data-fancybox="group" data-caption="l1Hxe0" class="fancybox"><img alt="l1Hxe0" title="l1Hxe0" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/ccu84I4Z0d.png!large" class="lazyload"></a></p><p>中国全量镜像站内说如果版本更新不成功需要重新下载包。<br><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/6ZQ9eJYcuk.png!large" data-fancybox="group" data-caption="l1HOQs" class="fancybox"><img alt="l1HOQs" title="l1HOQs" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/6ZQ9eJYcuk.png!large" class="lazyload"></a></p><p><strong>注意：一般正常擦做到上述第4步就可以</strong></p><h4 id="windos上安装composer"><a href="#windos上安装composer" class="headerlink" title="windos上安装composer"></a>windos上安装composer</h4><p>windows上安装composer比较方便，在<a href="https://docs.phpcomposer.com/00-intro.html" target="_blank" rel="noopener">composer中文网</a>直接下载exe文件进行一路确定安装即可，剩余的操作与linux上的操作无差别。</p><p><a href="https://cdn.learnku.com/uploads/images/201912/31/21543/DiiwNaEMme.png!large" data-fancybox="group" data-caption="l1zdQU" class="fancybox"><img alt="l1zdQU" title="l1zdQU" data-src="https://cdn.learnku.com/uploads/images/201912/31/21543/DiiwNaEMme.png!large" class="lazyload"></a></p><h1 id="Composer-国内全量镜像大全"><a href="#Composer-国内全量镜像大全" class="headerlink" title="Composer 国内全量镜像大全"></a>Composer 国内全量镜像大全</h1><h3 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ composer config -g repo.packagist composer  镜像地址</span><br><span class="line">$ composer clearcache</span><br><span class="line">$ composer update || install</span><br></pre></td></tr></table></figure></div><p>说明：若项目之前已通过其他源安装，可以删除 composer.lock 以及 vendor 目录，重新生成。</p><h3 id="关闭镜像"><a href="#关闭镜像" class="headerlink" title="关闭镜像"></a>关闭镜像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure></div><h3 id="阿里云-Composer-全量镜像"><a href="#阿里云-Composer-全量镜像" class="headerlink" title="阿里云 Composer 全量镜像"></a>阿里云 Composer 全量镜像</h3><p>镜像地址：<a href="https://mirrors.aliyun.com/composer/" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer/</a><br>官方地址：<a href="https://mirrors.aliyun.com/composer/index.html" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer/index.html</a><br>说明：终于接上大厂水管了，还没来得急测，先更新，估计阿里云做的也不会差。</p><h3 id="腾讯云-Composer-全量镜像"><a href="#腾讯云-Composer-全量镜像" class="headerlink" title="腾讯云 Composer 全量镜像"></a>腾讯云 Composer 全量镜像</h3><p>镜像地址：<a href="https://mirrors.cloud.tencent.com/composer/" target="_blank" rel="noopener">https://mirrors.cloud.tencent.com/composer/</a><br>官方地址：<a href="https://mirrors.cloud.tencent.com/composer" target="_blank" rel="noopener">https://mirrors.cloud.tencent.com/composer</a><br>说明：若您使用腾讯云服务器，可以将源的域名从 mirrors.cloud.tencent.com 改为 mirrors.tencentyun.com，使用内网流量不占用公网流量，是不是非常良心。</p><h3 id="华为-Composer-全量镜像"><a href="#华为-Composer-全量镜像" class="headerlink" title="华为 Composer 全量镜像"></a>华为 Composer 全量镜像</h3><p>镜像地址：<a href="https://mirrors.huaweicloud.com/repository/php/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/repository/php/</a><br>官方地址：<a href="https://mirrors.huaweicloud.com/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/</a><br>说明：华为 composer 镜像目前还不够完善，composer i 时会出现一些 bug ，而且同步速度也比较慢，好像并非是全量的。</p><h3 id="Packagist-Composer-中国全量镜像"><a href="#Packagist-Composer-中国全量镜像" class="headerlink" title="Packagist / Composer 中国全量镜像"></a>Packagist / Composer 中国全量镜像</h3><p>镜像地址：<a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a><br>官方地址：<a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">https://pkg.phpcomposer.com/</a><br>说明：Packagist 中国全量镜像是从 2014 年 9 月上线的，在安装和同步方面都比较完善，也一直是公益运营，但不知道目前这个镜像是否还是可用状态。</p><h3 id="Composer-Packagist-中国全量镜像"><a href="#Composer-Packagist-中国全量镜像" class="headerlink" title="Composer / Packagist 中国全量镜像"></a>Composer / Packagist 中国全量镜像</h3><p>镜像地址：<a href="https://php.cnpkg.org" target="_blank" rel="noopener">https://php.cnpkg.org</a><br>官方地址：<a href="https://php.cnpkg.org/" target="_blank" rel="noopener">https://php.cnpkg.org/</a><br>说明：此 composer 镜像由安畅网络赞助，目前支持元数据、下载包全量代理，还是不错的，推荐使用。</p><h3 id="Packagist-JP"><a href="#Packagist-JP" class="headerlink" title="Packagist / JP"></a>Packagist / JP</h3><p>镜像地址：<a href="https://packagist.jp" target="_blank" rel="noopener">https://packagist.jp</a><br>官方地址：<a href="https://packagist.jp" target="_blank" rel="noopener">https://packagist.jp</a><br>说明：这是日本开发者搭建的 composer 镜像，早上测了一下，感觉速度还不错。</p><h3 id="Packagist-Mirror"><a href="#Packagist-Mirror" class="headerlink" title="Packagist Mirror"></a>Packagist Mirror</h3><p>镜像地址：<a href="https://packagist.mirrors.sjtug.sjtu.edu.cn" target="_blank" rel="noopener">https://packagist.mirrors.sjtug.sjtu.edu.cn</a><br>官方地址：<a href="https://mirrors.sjtug.sjtu.edu.cn/packagist/" target="_blank" rel="noopener">https://mirrors.sjtug.sjtu.edu.cn/packagist/</a><br>说明：上海交通大学提供的 composer 镜像，稳定、快速、现代的镜像服务，推荐使用。</p><h3 id="Laravel-China-Composer-全量镜像"><a href="#Laravel-China-Composer-全量镜像" class="headerlink" title="Laravel China Composer 全量镜像"></a>Laravel China Composer 全量镜像</h3><p>镜像地址：<a href="https://packagist.laravel-china.org" target="_blank" rel="noopener">https://packagist.laravel-china.org</a><br>官方地址：<a href="https://learnku.com/laravel" target="_blank" rel="noopener">https://learnku.com/laravel</a><br>说明：这个就不多了，国内 PHP 开发者使用量最多的 composer 镜像，同步速度快、稳定，推荐使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="转载" scheme="https://blog.lihq.xyz/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>2020新年快乐</title>
    <link href="https://blog.lihq.xyz/2019/12/31/2020/"/>
    <id>https://blog.lihq.xyz/2019/12/31/2020/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="我的2019"><a href="#我的2019" class="headerlink" title="我的2019"></a>我的2019</h2><p>这一年，过得也是很复杂，跟往年一样复杂</p><h2 id="我的2020"><a href="#我的2020" class="headerlink" title="我的2020"></a>我的2020</h2><p>这一年，或许真的需要再接再厉吧</p><h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><p>大家一起加油呀，最初的梦想还记得吗</p><h1 id="新年快乐！！！"><a href="#新年快乐！！！" class="headerlink" title="新年快乐！！！"></a>新年快乐！！！</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="闲聊" scheme="https://blog.lihq.xyz/categories/%E9%97%B2%E8%81%8A/"/>
    
    
      <category term="life" scheme="https://blog.lihq.xyz/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>think-rbac for thinkphp6.0</title>
    <link href="https://blog.lihq.xyz/2019/12/27/think-rbac-for-thinkphp6.0/"/>
    <id>https://blog.lihq.xyz/2019/12/27/think-rbac-for-thinkphp6.0/</id>
    <published>2019-12-27T12:46:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="think-rbac-for-thinkphp6-0"><a href="#think-rbac-for-thinkphp6-0" class="headerlink" title="think-rbac for thinkphp6.0"></a>think-rbac for thinkphp6.0</h1><blockquote><p>之前做了一个thinkphp5.1版本的rbac接口管理，最近开始使用thinkphp6.0了，所以就可以开始升级我的rbac啦，哈哈哈</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>首先用composer安装</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require lihq1403/think-rbac:^1.0</span><br></pre></td></tr></table></figure></div><ol start="2"><li>发布配置文件</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php think lihq1403:rbac-publish</span><br></pre></td></tr></table></figure></div><p>会生成一个rbac.php的配置文件在config目录下</p><ol start="3"><li>rbac数据库迁移</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php think lihq1403:rbac-migrate</span><br></pre></td></tr></table></figure></div><p>然后就会发现数据库多了5张表，表字段具体内容可看代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rbac_role  角色 表</span><br><span class="line">rbac_user_role 用户角色 中间表</span><br><span class="line">rbac_permission_group 权限组 表</span><br><span class="line">rbac_permission 权限规则 表</span><br><span class="line">rbac_role_permission_group 角色权限组 中间表</span><br><span class="line">rbac_log 请求日志 表</span><br></pre></td></tr></table></figure></div><ol start="4"><li>thinkphp6里面使用<br>在你需要用到权限的用户model里面，引入<code>RBACUser</code>，参考如下：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Lihq1403</span>\<span class="title">ThinkRbac</span>\<span class="title">traits</span>\<span class="title">RBACUser</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class AdminUser</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\common\models</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminUser</span> <span class="keyword">extends</span> <span class="title">BaseModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超级管理员id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> SUPER_ADMINISTRATOR_ID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> <span class="title">RBACUser</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="5"><li>配合路由使用</li></ol><blockquote><p>如果不想使用的话，可以参考<code>Lihq1403\ThinkRbac\controller\RBACController</code>做自己的自定义方法</p></blockquote><p>路由参考如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; rbac 管理</span><br><span class="line">Route::group(&#39;rbac&#39;, function () &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 角色管理</span><br><span class="line">    Route::post(&#39;role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@addRole&#39;); &#x2F;&#x2F; 添加角色</span><br><span class="line">    Route::put(&#39;role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@editRole&#39;); &#x2F;&#x2F; 修改角色</span><br><span class="line">    Route::delete(&#39;role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@delRole&#39;); &#x2F;&#x2F; 删除角色</span><br><span class="line">    Route::get(&#39;roles&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@getRoles&#39;); &#x2F;&#x2F; 角色列表</span><br><span class="line">    Route::get(&#39;role&#x2F;permission-group&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@roleHoldPermissionGroup&#39;); &#x2F;&#x2F; 角色拥有的权限列表</span><br><span class="line">    Route::post(&#39;role&#x2F;change-permission-group&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@diffPermissionGroup&#39;); &#x2F;&#x2F; 角色更换的权限列表</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 权限组管理</span><br><span class="line">    Route::post(&#39;permission_group&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@addPermissionGroup&#39;); &#x2F;&#x2F; 权限组新增</span><br><span class="line">    Route::put(&#39;permission_group&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@editPermissionGroup&#39;); &#x2F;&#x2F; 权限组编辑</span><br><span class="line">    Route::delete(&#39;permission_group&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@delPermissionGroup&#39;);&#x2F;&#x2F; 权限组删除</span><br><span class="line">    Route::get(&#39;permission_groups&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@getPermissionGroups&#39;); &#x2F;&#x2F; 权限组列表</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 权限管理</span><br><span class="line">    Route::post(&#39;permission&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@addPermission&#39;); &#x2F;&#x2F; 权限新增</span><br><span class="line">    Route::put(&#39;permission&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@editPermission&#39;); &#x2F;&#x2F; 权限编辑</span><br><span class="line">    Route::delete(&#39;permission&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@delPermission&#39;); &#x2F;&#x2F; 权限删除</span><br><span class="line">    Route::get(&#39;permissions&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@getPermissions&#39;); &#x2F;&#x2F; 权限列表</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 管理员管理</span><br><span class="line">    Route::post(&#39;admin-user&#x2F;role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@userAssignRoles&#39;); &#x2F;&#x2F; 给管理员分配角色</span><br><span class="line">    Route::delete(&#39;admin-user&#x2F;role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@userCancelRoles&#39;); &#x2F;&#x2F; 给管理员删除角色</span><br><span class="line">    Route::post(&#39;admin-user&#x2F;sync-role&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@userSyncRoles&#39;); &#x2F;&#x2F; 同步管理员角色</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 日志管理</span><br><span class="line">    Route::get(&#39;logs&#39;, &#39;Lihq1403\ThinkRbac\controller\RBACController@getLog&#39;); &#x2F;&#x2F; 获取日志</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/27/5c73436844f49.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/27/5c73436844f49.png" class="lazyload"></a></p><ol start="6"><li>配合中间件进行权限验证<br>参考中间件如下：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">facades</span>\<span class="title">AdminAuth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">models</span>\<span class="title">AdminUser</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lihq1403</span>\<span class="title">ThinkRbac</span>\<span class="title">exception</span>\<span class="title">ForbiddenException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lihq1403</span>\<span class="title">ThinkRbac</span>\<span class="title">facade</span>\<span class="title">RBAC</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminUserRbac</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rbac中间件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Closure $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ForbiddenException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Request $request, \Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取要验证的用户id</span></span><br><span class="line">        $uid = AdminAuth::uid();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超级管理员不需要进行权限控制</span></span><br><span class="line">        <span class="keyword">if</span> ($uid !== AdminUser::SUPER_ADMINISTRATOR_ID) &#123;</span><br><span class="line">            <span class="comment">// 检查权限</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                RBAC::can($uid);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\Lihq1403\ThinkRbac\<span class="keyword">exception</span>\ForbiddenException $exception)&#123;</span><br><span class="line">                <span class="comment">// 如果没有权限，会抛出Lihq1403\ThinkRbac\exception\ForbiddenException异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException($exception-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        RBAC::log($uid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $next($request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="7"><li>生成规则</li></ol><blockquote><p>在config/rbac.php里面，会有两个数组，用于权限初始化，<code>permission_group_list</code>和<code>permission_list</code></p></blockquote><p>对自己的系统进行权限配置之后，刷新权限规则</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php think lihq1403:rbac-refresh -f yes</span><br></pre></td></tr></table></figure></div><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$rbac = <span class="keyword">new</span> Rbac();</span><br><span class="line"><span class="comment">// 或者使用门面</span></span><br><span class="line">\Lihq1403\ThinkRbac\facade\RBAC::action();</span><br></pre></td></tr></table></figure></div><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><p>请参考<code>Lihq1403\ThinkRbac\lib\RBACLib</code>和<code>Lihq1403\ThinkRbac\Rbac</code></p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><div style="text-align: center">  <div class="github-card" data-user="lihq1403" data-repo="think-rbac" data-height="200" data-width="100%" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script>]]></content>
    
    <summary type="html">
    
      think-rbac for thinkphp6.0
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="thinkphp" scheme="https://blog.lihq.xyz/tags/thinkphp/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用 satis 搭建一个私有的 Composer 包仓库</title>
    <link href="https://blog.lihq.xyz/2019/12/25/Using-satis-to-build-a-private-composer-package-warehouse/"/>
    <id>https://blog.lihq.xyz/2019/12/25/Using-satis-to-build-a-private-composer-package-warehouse/</id>
    <published>2019-12-25T15:53:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="使用-satis-搭建一个私有的-Composer-包仓库"><a href="#使用-satis-搭建一个私有的-Composer-包仓库" class="headerlink" title="使用 satis 搭建一个私有的 Composer 包仓库"></a>使用 satis 搭建一个私有的 Composer 包仓库</h1><h4 id="搭建缘由"><a href="#搭建缘由" class="headerlink" title="搭建缘由"></a>搭建缘由</h4><p>因为国内使用composer的时候，基本上都是用的镜像源，在开发包的时候，完成之后需要进行安装，就会出现一个同步时间差问题，等不及了，就可以先用自己的私有库顶住。当然，有些不公开的包就更需要一个私有的composer仓库了</p><p>说动手就动手，看了<a href="https://docs.phpcomposer.com/05-repositories.html#Hosting-your-own" target="_blank" rel="noopener">官方文档</a>，提供了好几种自建方法，我这里只是选择了<a href="https://docs.phpcomposer.com/articles/handling-private-packages-with-satis.html" target="_blank" rel="noopener">satis</a>，因为比较简单，哈哈哈</p><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project composer/satis --stability=dev --keep-vcs</span><br></pre></td></tr></table></figure></div><p>安装完成，会出现一个satis目录</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>satis的配置是通过satis.json进行的，我们在当前目录新建一个satis.json</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Lihq Private Composer Repository"</span>, </span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://packagist.test"</span>,</span><br><span class="line">  <span class="attr">"repositories"</span>: [</span><br><span class="line">    &#123; <span class="attr">"type"</span>: <span class="string">"git"</span>, <span class="attr">"url"</span>: <span class="string">"git@github.com:lihq1403/think-rbac.git"</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"require"</span>:&#123;</span><br><span class="line">       <span class="attr">"lihq1403/think-rbac"</span>:<span class="string">"*"</span></span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="attr">"archive"</span>: &#123;</span><br><span class="line">        <span class="attr">"directory"</span>: <span class="string">"dist"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"tar"</span>,</span><br><span class="line">        <span class="attr">"prefix-url"</span>: <span class="string">"http://packagist.test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><ul><li>name : 仓库的名字，自己定义</li><li>homepage ：仓库的主页地址</li><li>repositories ：需要获取包的路径</li><li>requre ： 指定获取哪些包（require-all:true 代表获取所有包）</li></ul><h6 id="archive-：缓存文件"><a href="#archive-：缓存文件" class="headerlink" title="archive ：缓存文件"></a>archive ：缓存文件</h6><blockquote><p>我们并不希望每次都clone，其实我们也可以缓存在我们的仓库中，这样每次update的时候就只用下载了</p></blockquote><ul><li>directory: 必需要的，表示生成的压缩包存放的目录，会在我们build时的目录中</li><li>format: 压缩包格式, zip（默认） tar</li><li>prefix-url: 下载链接的前缀的Url,默认会从homepage中取</li><li>skip-dev: 默认为假，是否跳过开发分支</li><li>absolute-directory: 绝对目录</li><li>whitelist: 白名单，只下载哪些</li><li>blacklist: 黑名单，不下载哪些</li><li>checksum: 可选，是否验证sha1</li></ul><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php bin/satis build satis.json public/</span><br></pre></td></tr></table></figure></div><p>执行命令，会生成包的缓存与web应用</p><h3 id="web访问"><a href="#web访问" class="headerlink" title="web访问"></a>web访问</h3><p>配置nginx指向刚刚生成的public就好了</p><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/25/a229bd967e245.png" data-fancybox="group" data-caption="微信截图_20191225232725.png" class="fancybox"><img alt="微信截图_20191225232725.png" title="微信截图_20191225232725.png" data-src="https://blog-1256184194.file.myqcloud.com/2019/12/25/a229bd967e245.png" class="lazyload"></a></p><p>然后打开上面配置的homepage，看到如下就代表成功啦<br><a href="https://blog-1256184194.file.myqcloud.com/2019/12/25/a336af9832fbf.png" data-fancybox="group" data-caption="微信截图_20191225232930.png" class="fancybox"><img alt="微信截图_20191225232930.png" title="微信截图_20191225232930.png" data-src="https://blog-1256184194.file.myqcloud.com/2019/12/25/a336af9832fbf.png" class="lazyload"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们只需要在项目中，添加本源即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"repositories"</span>: [&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"composer"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://packagist.test"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后就可以开开心心的<code>composer update</code>了</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="镜像拉取"><a href="#镜像拉取" class="headerlink" title="镜像拉取"></a>镜像拉取</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull composer/satis</span><br></pre></td></tr></table></figure></div><blockquote><p>ps 吐槽。pull的也太慢了吧，以后再尝试了，todo</p></blockquote><h2 id="satis-json详细说明"><a href="#satis-json详细说明" class="headerlink" title="satis.json详细说明"></a>satis.json详细说明</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"MY SATIS"</span>,<span class="comment">//项目名称</span></span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://satis.example.work"</span>,<span class="comment">//项目地址</span></span><br><span class="line">  <span class="attr">"repositories"</span>: [<span class="comment">//指定获取包的仓库地址</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"vcs"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"git@gitlab.example.cn:xx/test.git"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"vcs"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"git@gitlab.example.cn:xx/weibo.git"</span></span><br><span class="line">    &#125;,</span><br><span class="line">   &#123;</span><br><span class="line"><span class="comment">// 不再拉取packagist.org上的包，可节省大量时间</span></span><br><span class="line">     <span class="attr">"packagist.org"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"require"</span>: &#123;<span class="comment">//指定可以获取包的版本，存在"require-all": true设置时将从仓库获取所有相关的依赖包，所以一般不设置。使用"require-all": true时就不能再从packagist.org上拉取包了，不然satis将会把所有packagist.org上的包都拉取下来</span></span><br><span class="line">    <span class="attr">"xx/test"</span>: <span class="string">"*"</span>,<span class="comment">//尝试从以上两个配置好的仓库与管理员的全局配置中的仓库中拉取</span></span><br><span class="line">    <span class="attr">"laravel/laravel"</span>: <span class="string">"5.6.21"</span>,<span class="comment">//由于以上两个仓库中没有该项目，所以将从管理员的全局配置文件中使用的仓库地址中拉取</span></span><br><span class="line">    <span class="attr">"xx/weibo"</span>: <span class="string">"1.5.0|1.0.3"</span><span class="comment">//"*"为全部版本，"1.5.0|1.0.3"为1.5.0与1.0.3两个版本</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"archive"</span>: &#123;<span class="comment">//镜像缓存设置，该设置会缓存require配置项中各个仓库的代码</span></span><br><span class="line">    <span class="attr">"directory"</span>: <span class="string">"dist"</span>,<span class="comment">//缓存目录名称</span></span><br><span class="line">    <span class="attr">"format"</span>: <span class="string">"tar"</span>,<span class="comment">//缓存格式</span></span><br><span class="line">    <span class="attr">"prefix-url"</span>: <span class="string">"http://satis.example.work"</span>,<span class="comment">//下载的前缀不要写成http://satis.example.work/不然链接将会出问题</span></span><br><span class="line">    <span class="attr">"skip-dev"</span>: <span class="literal">false</span><span class="comment">//是否跳过开发版本，一般为true，但我为了方便测试就选择了false</span></span><br><span class="line"><span class="comment">// 其他配置项：absolute-directory: 绝对目录</span></span><br><span class="line"><span class="comment">// whitelist: 白名单，只下载哪些</span></span><br><span class="line"><span class="comment">// blacklist: 黑名单，不下载哪些</span></span><br><span class="line"><span class="comment">// checksum: 可选，是否验证sha1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;<span class="comment">//拉取代码时的配置</span></span><br><span class="line">    <span class="attr">"secure-http"</span>:<span class="literal">false</span>,<span class="comment">//由于公司部分项目的存放地址可能使用http链接，所以此处设置为false</span></span><br><span class="line">    <span class="attr">"github-oauth"</span>: &#123;<span class="comment">//部分放在github中的项目需要提前配置好token避免拉取时再输入</span></span><br><span class="line">        <span class="attr">"github.com"</span>: <span class="string">"83dxxxxxxxxxxx8888888800062"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"bitbucket-oauth"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"gitlab-oauth"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"gitlab-token"</span>: &#123;</span><br><span class="line">        <span class="attr">"gitlab.example.cn"</span>:<span class="string">"zxxxxxxxxxxxQjZT"</span><span class="comment">//公司gitlab的token配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"http-basic"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>小破站迁移辛酸史</title>
    <link href="https://blog.lihq.xyz/2019/12/14/migration-of-small-broken-stations/"/>
    <id>https://blog.lihq.xyz/2019/12/14/migration-of-small-broken-stations/</id>
    <published>2019-12-14T13:53:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="小破站迁移辛酸史"><a href="#小破站迁移辛酸史" class="headerlink" title="小破站迁移辛酸史"></a>小破站迁移辛酸史</h1><blockquote><p>还不是想体验一把漂亮的主题<del>（是因为穷）</del>，哈哈哈</p></blockquote><h2 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h2><h5 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h5><ul><li>Typecho</li><li>Vps</li></ul><p>一开始这样也确实不错，但是太平常了-.-，<code>PHP</code>+<code>MYSQL</code>+<code>NGINX</code>一把梭</p><h2 id="现在的方案"><a href="#现在的方案" class="headerlink" title="现在的方案"></a>现在的方案</h2><h5 id="用到的工具-1"><a href="#用到的工具-1" class="headerlink" title="用到的工具"></a>用到的工具</h5><ul><li>Hexo + Butterfly</li><li>Travis CI</li><li>GitHub Pages + Vps</li></ul><p>其实现在这样也是内容多多，但是也学到了很多东西呀，主要是用到了自动部署方案，以后只需要专注于写作就ok了</p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><ol><li>一开始我是用 <code>GitHub Pages</code> 和 <code>Coding Pages</code> 来部署双节点，用了一天之后，CodingPage就突然发问不了了，Bu和Go了一下，发现CodingPage就突然发问不了了好像确实不咋地，服务不稳定啊，那没办法了，还是部署一套在我的小水管上面吧</li><li>我的<a href="https://github.com/lihq1403/lihq1403.github.io/blob/hexo/.travis.yml" target="_blank" rel="noopener">.travis.yml</a>文件给大家参考一下，主要是推送到<code>github</code>和<code>coding</code>上面，一开始是这方案，后面coding也就没有用了，但是也没删，就放着当备份呗</li><li>Vps上面的代码同步采用了WebHook来进行同步</li><li>使用 Git Subtree 管理主题版本，这样的话，以后切换主题妈妈就再也不用担心了</li><li>在域名服务商那边记得填写两个域名解析哦，一个是去<code>GitHub Pages</code>，一个是去自己的Vps</li><li><code>GitHub Pages</code>自定义域名记得在source下面放CNAME文件，不然好像过一会自定义域名就会掉</li><li><code>hexo d</code>了之后，代码确实有push到master上面，但是里面没有内容，没办法，我就只能在<a href="https://github.com/lihq1403/lihq1403.github.io/blob/hexo/.travis.yml" target="_blank" rel="noopener">.travis.yml</a>里面用上了手动推送public目录</li><li>文章里面有很多部署细节我都没说，因为这些<a href="https://www.google.com/" target="_blank" rel="noopener">G</a>一下或者<a href="https://www.baidu.com/" target="_blank" rel="noopener">B</a>一下都可以获取的到哦，主要是提供一个思路就好啦</li></ol><h2 id="附上我的双节点"><a href="#附上我的双节点" class="headerlink" title="附上我的双节点"></a>附上我的双节点</h2><blockquote><p>果然很完美，我的小水管挺住</p></blockquote><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/c949b4c8c0542.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/c949b4c8c0542.png" class="lazyload"></a></p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><blockquote><p>确实漂亮，没的说</p></blockquote><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/ec8fa1b1f6ee4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/ec8fa1b1f6ee4.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="web" scheme="https://blog.lihq.xyz/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践之Docker-Compose安装</title>
    <link href="https://blog.lihq.xyz/2019/11/08/docker-compose-installation-of-docker-practice/"/>
    <id>https://blog.lihq.xyz/2019/11/08/docker-compose-installation-of-docker-practice/</id>
    <published>2019-11-08T07:52:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker实践之Docker-Compose安装"><a href="#Docker实践之Docker-Compose安装" class="headerlink" title="Docker实践之Docker-Compose安装"></a>Docker实践之Docker-Compose安装</h1><h3 id="什么是docker-compose"><a href="#什么是docker-compose" class="headerlink" title="什么是docker-compose"></a>什么是docker-compose</h3><ul><li>是一个用于运行和管理多个容器化应用的工具</li><li><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">官方介绍</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">官方教程</a></li></ul><blockquote><p>我这里的环境是centos7，要安装自己的实际情况进行安装哦，ps：根据网络情况可能会下载的很慢，大家可以扶墙之后去<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a>上面寻找适合自己环境的包直接下载</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.24.1&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"># sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"># sudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure></div><p>命令讲解：其实就是去github上面下载一个docker-compose当前主机的发行版本，二进制文件，并赋予可执行权限，环境变量的话，就要实际情况了，可以进行修改路径，或者进行ln -s创建软链接进行快速访问</p><h3 id="测试可用"><a href="#测试可用" class="headerlink" title="测试可用"></a>测试可用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br><span class="line">docker-py version: 3.7.3</span><br><span class="line">CPython version: 3.6.8</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="docker" scheme="https://blog.lihq.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>压测工具 - ab</title>
    <link href="https://blog.lihq.xyz/2019/10/19/pressure-measuring-tool-ab/"/>
    <id>https://blog.lihq.xyz/2019/10/19/pressure-measuring-tool-ab/</id>
    <published>2019-10-19T03:22:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="压测工具-ab"><a href="#压测工具-ab" class="headerlink" title="压测工具 - ab"></a>压测工具 - ab</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Centos7.5</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>QPS：每秒钟请求或查询数量，在互联网领域指每秒响应的请求数（指HTTP请求）</li><li>吞吐量：单位时间内处理的请求数量（通常由QPS和并发数决定）</li><li>响应时间：从请求发出到收到响应花费时间</li><li>PV：综合浏览量（Page View），即页面浏览量或者点击量，一个访客在24小时内访问的页面数量。同一个人浏览你的网站同一个页面，只记作一次PV</li><li>UV：独立访客（UniQue Visitor）,即一定时间范围内相同访客多次访问网站，只能计算为1个独立访客</li><li>带宽：计算带宽大小需关注两个指标，峰值流量和页面的平均大小</li><li>日网站带宽=PV/统计时间（秒）<em>平均页面大小（KB）</em>8</li><li>峰值一般是平均值的倍数</li><li>QPS不等于并发并发连接数。QPS是每秒HTTP请求数量，并发连接数是系统同时处理的请求数量</li><li>二八定律（80%的访问量集中在20%的时间）：（总PV数<em>80%）/（6小时秒速</em>20%）=峰值每秒请求数（QPS）</li><li>压力测试：能承受最大的并发数和最大承受的QPS值</li></ol><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><ol><li>测试机器与被测机器分开</li><li>不要对线上服务做压力测试</li><li>观察测试工具所在机器，以及被测试的前端机的CPU、内存、网络等都不超过最高限度的75%</li></ol><h3 id="QPS指标"><a href="#QPS指标" class="headerlink" title="QPS指标"></a>QPS指标</h3><ol><li>QPS达到50，可以称之为小型网站，一般服务器都可以应付 </li><li>QPS达到100；瓶颈：MySQL查询达到瓶颈；优化方案：数据库缓存层，数据库负载均衡</li><li>QPS达到800；瓶颈：带宽速度达到瓶颈；优化方案：CDN加速，负载均衡</li><li>QPS达到1000；瓶颈：缓存服务器的带宽达到瓶颈；优化方案：静态HTML缓存</li><li>QPS达到2000；瓶颈：文件系统访问锁成为灾难；优化方案：做业务分离，分布式存储</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install httpd-tools</span><br></pre></td></tr></table></figure></div><h2 id="检验是否成功"><a href="#检验是否成功" class="headerlink" title="检验是否成功"></a>检验是否成功</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ab -V</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;</span><br><span class="line">Licensed to The Apache Software Foundation, http:&#x2F;&#x2F;www.apache.org&#x2F;</span><br></pre></td></tr></table></figure></div><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="检测接口最大qps"><a href="#检测接口最大qps" class="headerlink" title="检测接口最大qps"></a>检测接口最大qps</h3><p>模拟并发请求10次，总请求100次</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ab -n 100 -c 10 http:&#x2F;&#x2F;xxx</span><br><span class="line"></span><br><span class="line">Requests per second: 101.15[#&#x2F;sec](mean)</span><br></pre></td></tr></table></figure></div><h2 id="工具能力发掘"><a href="#工具能力发掘" class="headerlink" title="工具能力发掘"></a>工具能力发掘</h2><p><a href="http://httpd.apache.org/docs/2.0/programs/ab.html" target="_blank" rel="noopener">ab工具</a></p><p><a href="https://www.baidu.com/s?wd=ab%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">more</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>【转载】关于PHP程序员技术职业生涯规划</title>
    <link href="https://blog.lihq.xyz/2019/10/13/reprint-about-the-technical-career-planning-of-php-programmers/"/>
    <id>https://blog.lihq.xyz/2019/10/13/reprint-about-the-technical-career-planning-of-php-programmers/</id>
    <published>2019-10-13T08:54:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文地址：<a href="http://rango.swoole.com/archives/570" target="_blank" rel="noopener">【转载】关于PHP程序员技术职业生涯规划</a></p></blockquote><p>看到很多PHP程序员职业规划的文章，都是直接上来就提Linux、PHP、MySQL、Nginx、Redis、Memcache、jQuery这些，然后就直接上手搭环境、做项目，中级就是学习各种PHP框架和类库，高级阶段就是MySQL优化、PHP内核与扩展、架构设计这些了。</p><p>这些文章都存在一个严重的缺陷，不重视基础。就好比练武功，只求速成，不修炼内功和心法，只练各种招式，这样能高到哪里去？我所见过的PHP大牛每一个都是具备非常扎实的基础，他们之所以能成为大牛，是因为基础足够好。基础不稳，面对技术复杂的系统，如同盲人摸象、管中窥豹，只得其门不得其法。而且如果基础不扎实，也没办法进入大公司。国外的Google、Facebook，国内的腾讯、阿里、百度、滴滴、京东、新浪等知名互联网企业，无论哪一家公司面试必然会考验应聘者的技术功底。无法进入一个拥有大规模并发请求的项目中得到历练，不坚持提升自己，那也只能在小公司混日子了。</p><p>我最开始工作也是在2家小公司，后来加入腾讯阿里，主要原因还是我坚持学习基础知识，从而得倒了这个机会。有几个方面的基础知识，我建议每一位PHP程序员都应该好好学习一下。我推荐几本书给大家，包括深入理解计算机系统、现代操作系统、C程序设计语言、C语言数据结构和算法、Unix环境高级编程、TCP/IP网络通信详解。另外我建议大家学习一下面向对象方面知识，PHP这方面的书不太多，建议看Java面向对象编程、Java编程思想、J2EE这些书。PHP语言基础方面，建议认真地把PHP5权威编程这本书好好读完。另外不光要读，还要照着书中的讲解动手去编程实践。</p><p>总之有一个好的基础，再去学LAMP、Redis、PHP框架、前端，这样取得的成就更大。这与年龄无关、与学历无关、与智力无关，与天赋也无关。只要肯努力学习，人人可以成为技术大牛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="转载" scheme="https://blog.lihq.xyz/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践之应用篇 - MailHog</title>
    <link href="https://blog.lihq.xyz/2019/10/12/application-of-docker-practice-mailhog/"/>
    <id>https://blog.lihq.xyz/2019/10/12/application-of-docker-practice-mailhog/</id>
    <published>2019-10-12T02:18:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker实践之应用篇-MailHog"><a href="#Docker实践之应用篇-MailHog" class="headerlink" title="Docker实践之应用篇 - MailHog"></a>Docker实践之应用篇 - MailHog</h1><h2 id="MailHog-介绍"><a href="#MailHog-介绍" class="headerlink" title="MailHog 介绍"></a>MailHog 介绍</h2><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/8ef163508cfe1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/8ef163508cfe1.png" class="lazyload"></a></p><blockquote><p>引用<a href="https://github.com/mailhog/MailHog" target="_blank" rel="noopener">mailhog/MailHog</a>的介绍：Web and API based SMTP testing</p></blockquote><p>即 本地开发测试的邮件服务，它提供了一个 Web 界面，可以检查应用发送的邮件，运行 MailHog 最简单的方法是用 Docker</p><h2 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mailhog -p 1025:1025 -p 8025:8025 -d mailhog&#x2F;mailhog</span><br></pre></td></tr></table></figure></div><p>其中1025 是发邮件用的端口，8025 是 Web 界面用的端口</p><p>运行之后看到下面的结果就代表成功了，是不是很简单 -.-!<br><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/0dda99bfd5c22.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/0dda99bfd5c22.png" class="lazyload"></a></p><h2 id="查看web页面"><a href="#查看web页面" class="headerlink" title="查看web页面"></a>查看web页面</h2><p>因为我是虚拟机环境，配置了虚拟网络，所以访问地址是<a href="http://192.168.56.10:8025" target="_blank" rel="noopener">http://192.168.56.10:8025</a></p><p>访问ip地址要根据自己的环境来切换哦，别照搬</p><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/ea6a2d4084516.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/ea6a2d4084516.png" class="lazyload"></a></p><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>我这里使用了<a href="https://github.com/mailhog/mhsendmail/" target="_blank" rel="noopener">mailhog/mhsendmail</a>模拟了邮件发送</p><p>安装也是很简单的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install go</span><br><span class="line">go get github.com&#x2F;mailhog&#x2F;mhsendmail</span><br><span class="line">ln  ~&#x2F;go&#x2F;bin&#x2F;mhsendmail &#x2F;usr&#x2F;bin&#x2F;mhsendmail</span><br><span class="line">mhsendmail -h</span><br></pre></td></tr></table></figure></div><p>测试发送</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mhsendmail --smtp-addr&#x3D;&quot;127.0.0.1:1025&quot; test@mailhog.local &lt;&lt;EOF</span><br><span class="line">From: App &lt;app@mailhog.local&gt;</span><br><span class="line">To: Test &lt;test@mailhog.local&gt;</span><br><span class="line">Subject: Test message</span><br><span class="line"></span><br><span class="line">Some content!</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/26e904d7e71d4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/26e904d7e71d4.png" class="lazyload"></a></p><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/1524e0539aae5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/1524e0539aae5.png" class="lazyload"></a></p><p>可以通过web页面看到我们已经发送成功了</p><h2 id="项目中"><a href="#项目中" class="headerlink" title="项目中"></a>项目中</h2><p>配置应用的 SMTP 邮件功能的时候，邮件服务主机填写 localhost，端口号是 1025。这样应用发送的邮件都会被 mailhog 接收到，你在它提供的 Web 界面可以检查邮件内容。</p><p>如在laravel中时，.env配置如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DRIVER&#x3D;smtp</span><br><span class="line">MAIL_HOST&#x3D;127.0.0.1</span><br><span class="line">MAIL_PORT&#x3D;1025</span><br><span class="line">MAIL_USERNAME&#x3D;null</span><br><span class="line">MAIL_PASSWORD&#x3D;null</span><br><span class="line">MAIL_ENCRYPTION&#x3D;null</span><br></pre></td></tr></table></figure></div><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mailhog</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
      <category term="docker" scheme="https://blog.lihq.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="https://blog.lihq.xyz/2019/10/11/common-docker-commands/"/>
    <id>https://blog.lihq.xyz/2019/10/11/common-docker-commands/</id>
    <published>2019-10-11T01:35:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images           # 列出所有镜像(images)</span><br><span class="line">docker ps               # 列出正在运行的容器(containers)</span><br><span class="line">docker ps -a            # 列出所有的容器</span><br><span class="line">docker pull centos      # 下载centos镜像</span><br><span class="line">docker top &lt;container&gt;  # 查看容器内部运行程序</span><br></pre></td></tr></table></figure></div><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container&gt;                  # 停止一个正在运行的容器，&lt;container&gt;可以是容器ID或名称</span><br><span class="line">docker start &lt;container&gt;                 # 启动一个已经停止的容器</span><br><span class="line">docker restart &lt;container&gt;               # 重启容器</span><br><span class="line">docker rm &lt;container&gt;                    # 删除容器</span><br><span class="line"></span><br><span class="line">docker run -i -t -p :80 LAMP &#x2F;bin&#x2F;bash   # 运行容器并做http端口转发</span><br><span class="line">docker exec -it &lt;container&gt; &#x2F;bin&#x2F;bash    # 进入ubuntu类容器的bash</span><br><span class="line">docker exec -it &lt;container&gt; &#x2F;bin&#x2F;sh      # 进入alpine类容器的sh</span><br><span class="line"></span><br><span class="line">docker rm &#96;docker ps -a -q&#96;              # 删除所有已经停止的容器</span><br><span class="line">docker kill $(docker ps -a -q)           # 杀死所有正在运行的容器，$()功能同&#96;&#96;</span><br></pre></td></tr></table></figure></div><h2 id="提交-导出"><a href="#提交-导出" class="headerlink" title="提交/导出"></a>提交/导出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build --rm&#x3D;true -t hjue&#x2F;lamp .    # 建立映像文件。–rm 选项是告诉Docker，在构建完成后删除临时的Container，Dockerfile的每一行指令都会创建一个临时的Container，一般这些临时生成的Container是不需要的</span><br><span class="line">docker commit 3a09b2588478 mynewimage    # 提交你的变更，并且把容器保存成镜像，命名为mynewimage，3a09b2588478为容器的ID</span><br><span class="line"></span><br><span class="line">docker save mynewimage | bzip2 -9 -c&gt; &#x2F;home&#x2F;save.tar.bz2  # 把 mynewimage 镜像保存成 tar 文件</span><br><span class="line">bzip2 -d -c &lt; &#x2F;home&#x2F;save.tar.bz2 | docker load            # 加载 mynewimage 镜像</span><br><span class="line"></span><br><span class="line">docker export &lt;CONTAINER ID&gt; &gt; &#x2F;home&#x2F;export.tar           # 导出Image</span><br><span class="line">cat &#x2F;home&#x2F;export.tar | sudo docker import - mynewimage    # 导入Image镜像</span><br></pre></td></tr></table></figure></div><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t centos &#x2F;bin&#x2F;bash          # 运行centos镜像</span><br><span class="line">docker run -d -p 80:80 hjue&#x2F;centos-lamp    # 运行centos-lamp镜像</span><br><span class="line"></span><br><span class="line">docker rmi [image-id]                      # 删除镜像</span><br><span class="line">docker rmi $(docker images -q)             # 删除所有镜像</span><br></pre></td></tr></table></figure></div><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --help</span><br></pre></td></tr></table></figure></div><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)                                         # 停止所有</span><br><span class="line">docker kill $(docker ps -a -q)                                         # 杀死所有正在运行的容器</span><br><span class="line">docker rm $(docker ps -a -q)                                           # 删除所有已经停止的容器</span><br><span class="line">docker rmi $(docker images -q -f dangling&#x3D;true)                        # 删除所有未打 dangling 标签的镜像</span><br><span class="line">docker rmi $(docker images -q)                                         # 删除所有镜像</span><br><span class="line">docker rmi --force $(docker images | grep doss-api | awk &#39;&#123;print $3&#125;&#39;) # 强制删除镜像名称中包含“doss-api”的镜像</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="docker" scheme="https://blog.lihq.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【自己动手】助手函数包 helper</title>
    <link href="https://blog.lihq.xyz/2019/09/05/helper-package-helper/"/>
    <id>https://blog.lihq.xyz/2019/09/05/helper-package-helper/</id>
    <published>2019-09-05T07:32:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="【自己动手】助手函数包-helper"><a href="#【自己动手】助手函数包-helper" class="headerlink" title="【自己动手】助手函数包 helper"></a>【自己动手】助手函数包 helper</h1><blockquote><p>受人启发，<a href="https://learnku.com/articles/26982" target="_blank" rel="noopener">每个项目都写 helper? 为什么不自己搞一个呢？</a>，所以自己动手写一个，以后又不断的更新就好啦，不错不错</p></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/lihq1403/helper" target="_blank" rel="noopener">https://github.com/lihq1403/helper</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer require lihq1403/helper</span></span><br></pre></td></tr></table></figure></div><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>用法文档</li></ul><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><ul><li>同时也学习了一波单元测试，不亏血赚</li><li>断言：<a href="https://www.cnblogs.com/cxscode/p/8277023.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxscode/p/8277023.html</a></li></ul><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><div style="text-align: center">  <div class="github-card" data-user="lihq1403" data-repo="helper" data-height="200" data-width="100%" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>php 处理高精度计算函数</title>
    <link href="https://blog.lihq.xyz/2019/09/02/php-processing-high-precision-calculation-function/"/>
    <id>https://blog.lihq.xyz/2019/09/02/php-processing-high-precision-calculation-function/</id>
    <published>2019-09-02T08:02:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>PHP 为任意精度数学计算提供了二进制计算器（Binary Calculator），它支持任意大小和精度的数字，以字符串形式描述</p></blockquote><ul><li><a href="https://www.php.net/manual/en/function.bcadd.php" target="_blank" rel="noopener">bcadd</a> — 加法</li><li><a href="https://www.php.net/manual/en/function.bcsub.php" target="_blank" rel="noopener">bcsub</a> — 减法</li><li><a href="https://www.php.net/manual/en/function.bcmul.php" target="_blank" rel="noopener">bcmul</a> — 乘法</li><li><a href="https://www.php.net/manual/en/function.bcdiv.php" target="_blank" rel="noopener">bcdiv</a> — 相除</li><li><a href="https://www.php.net/manual/en/function.bccomp.php" target="_blank" rel="noopener">bccomp</a> — 比较</li><li><a href="https://www.php.net/manual/en/function.bcmod.php" target="_blank" rel="noopener">bcmod</a> — 求余数</li><li><a href="https://www.php.net/manual/en/function.bcpow.php" target="_blank" rel="noopener">bcpow</a> — 次方</li><li><a href="https://www.php.net/manual/en/function.bcpowmod.php" target="_blank" rel="noopener">bcpowmod</a> — 先次方然后求余数</li><li><a href="https://www.php.net/manual/en/function.bcscale.php" target="_blank" rel="noopener">bcscale</a> — 给所有函数设置小数位精度</li><li><a href="https://www.php.net/manual/en/function.bcsqrt.php" target="_blank" rel="noopener">bcsqrt</a> — 求平方根</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>【BUG修复日记】之支付回调websocket busy</title>
    <link href="https://blog.lihq.xyz/2019/08/30/daily-bug-payment-callback-websocket-busy/"/>
    <id>https://blog.lihq.xyz/2019/08/30/daily-bug-payment-callback-websocket-busy/</id>
    <published>2019-08-30T01:59:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="【BUG修复日记】之支付回调websocket-busy"><a href="#【BUG修复日记】之支付回调websocket-busy" class="headerlink" title="【BUG修复日记】之支付回调websocket busy"></a>【BUG修复日记】之支付回调websocket busy</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>项目中，用到了第四方聚合扫码支付，支付成功会有回调。回调支付成功是服务端的数据整理（这段实现没问题），但是前台页面需要弹出支付成功，并关闭二维码，一开始想了好几个方案：</p><ol><li>展示二维码的同时，前端轮询查询状态接口，直到成功就提示支付成功</li><li>展示二维码的同时，使用websocket进行长连接，支付成功，服务端主动推送成功结果</li></ol><blockquote><p>作为技术爱好者，当然是选择第二种啦（感觉第一种没啥技术含量，而且会造成服务端接受太多无用请求了）</p></blockquote><p>说干就干：<br>用的框架是tp5.1，可以用workeman来实现websocket</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink&#x2F;think-worker&#x3D;2.0.* &#x2F;&#x2F; 5.1仅支持2.0，别搞错了哦</span><br></pre></td></tr></table></figure></div><p>有关workeman的介绍可以看官方文档：<a href="http://doc.workerman.net/" target="_blank" rel="noopener">Workerman，高性能socket服务框架</a></p><p>安装完成之后，会生成几个文件，我们需要关系的就只是config/worker_server.php</p><p>我这里只是做了简单的长连接，主要修改了onMessage回调（记得修改protocol，host，port，count等等配置）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#39;onMessage&#39;      &#x3D;&gt; function ($connection, $data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 客户端回应服务端的心跳</span><br><span class="line">    if ($data &#x3D;&#x3D; &#39;pong&#39;) &#123;</span><br><span class="line">        $connection-&gt;send(&#39;pong&#39;);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 客户端传递的是json数据</span><br><span class="line">    $message_data &#x3D; json_decode($data, true);</span><br><span class="line">    if(!$message_data) &#123;</span><br><span class="line">        $connection-&gt;send(error(&#39;error require data&#39;));</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch ($message_data[&#39;type&#39;]) &#123;</span><br><span class="line">        &#x2F;&#x2F; 客户端检查是否扫码支付完成</span><br><span class="line">        case &#39;qrPayQuery&#39;:</span><br><span class="line">            if (empty($message_data[&#39;orderId&#39;])) &#123;</span><br><span class="line">                $return &#x3D; error(&#39;empty orderId&#39;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 查询订单是否已经完成支付</span><br><span class="line">            while (1) &#123;</span><br><span class="line">                $status &#x3D; Cache::connect(config(&#39;***&#39;))-&gt;get(&#39;***&#39;.$message_data[&#39;orderId&#39;]);</span><br><span class="line">                if ($status &#x3D;&#x3D;&#x3D; false) &#123;</span><br><span class="line">                    $return &#x3D; error(&#39;no found orderId&#39;);</span><br><span class="line">                    break ;</span><br><span class="line">                &#125;</span><br><span class="line">                if ($status &#x3D;&#x3D; &#39;success&#39;) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 直到状态是成功</span><br><span class="line">                    $return &#x3D; success(&#39;success&#39;);</span><br><span class="line">                    break ;</span><br><span class="line">                &#125;</span><br><span class="line">                sleep(mt_rand(1,2));</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            $return &#x3D; error(&#39;error type&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $connection-&gt;send($return);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在支付成功的回调中，我创建了一个订单号值的缓存，置为success。有请求过来的时候，就不断轮询缓存值，直到成功标志位被检查到才停止，主动推送。</p><p>将这一套方案提交到测试服的时候，前端接入的时候一切正常，当时就没太在意里面的问题。果然，测试介入的时候，问题就暴露出来了，测试反馈：前端页面没有提示支付成功也没有关闭二维码，支付记录是有值的。</p><p>然后我去测试websocket链接的时候，发现连不上，服务端看状态</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pid     memory  listening                 worker_name        connections send_fail timers  total_request qps    status</span><br><span class="line">29270   N&#x2F;A      websocket:&#x2F;&#x2F;0.0.0.0:17730 name               N&#x2F;A          N&#x2F;A         N&#x2F;A       N&#x2F;A            N&#x2F;A      [busy]</span><br></pre></td></tr></table></figure></div><p>哇塞，服务挂掉了。。。万能的重启，果然恢复了，但是测试用了一段时间，又挂掉了。</p><p>初步猜测：</p><ol><li>进程死循环了</li></ol><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>那么开始解决问题，查了一些资料，并<a href="http://doc.workerman.net/debug/busy-process.html" target="_blank" rel="noopener">调试busy进程</a></p><p>果然问题和我猜测的一样，死循环了，因为测试打开支付页面，并不支付，就导致订单号一直存在，回调没有给到结果，就会出现不断查询不支付的缓存，导致服务进程内存爆掉了。</p><blockquote><p>出现了问题，就要想一想解决办法，为了防止服务端有死循环，那么就要抛弃掉轮询查询，而是改为回调的时候，通知服务端，再由服务端通知客户端</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">第四方回调--&gt;服务端</span><br><span class="line">服务端--&gt;指定客户端</span><br></pre></td></tr></table></figure></div><p>当时想了很久：</p><ol><li>使用<a href="http://doc2.workerman.net/" target="_blank" rel="noopener">GatewayWorker</a>提供用户标识定向推送结果</li><li>WorkerMan实现指定客户端推送</li></ol><blockquote><p>第一种方案，有点大材小用了，毕竟是用来专业做消息推送的</p></blockquote><p>果然千辛万苦（哈哈哈，其实只是学习的时候，知道有这个方案。），找到了官方的一个方案 <a href="http://doc.workerman.net/faq/send-data-to-client.html" target="_blank" rel="noopener">WorkerMan中如何向某个特定客户端发送数据</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">以上例子可以针对uid推送，虽然是单进程，但是支持个10W在线是没问题的。</span><br><span class="line">注意这个例子只能单进程，也就是$worker-&gt;count 必须是1</span><br></pre></td></tr></table></figure></div><p>看上去，本项目应该也没有10W在线那么夸张，就这样做了</p><p>那么开始动手，修改我的onMessage回调</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    &#39;onMessage&#39;      &#x3D;&gt; function ($connection, $data) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 客户端回应服务端的心跳</span><br><span class="line">        if ($data &#x3D;&#x3D; &#39;pong&#39;) &#123;</span><br><span class="line">            $connection-&gt;send(&#39;pong&#39;);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 客户端传递的是json数据</span><br><span class="line">        $message_data &#x3D; json_decode($data, true);</span><br><span class="line">        if(!$message_data) &#123;</span><br><span class="line">            $connection-&gt;send(error(&#39;error require data&#39;));</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch ($message_data[&#39;type&#39;]) &#123;</span><br><span class="line">            &#x2F;&#x2F; 客户端检查是否扫码支付完成</span><br><span class="line">            case &#39;qrPayQuery&#39;:</span><br><span class="line">                if (empty($message_data[&#39;orderId&#39;])) &#123;</span><br><span class="line">                    $return &#x3D; error(&#39;empty orderId&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                global $worker;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 把orderId当做uid</span><br><span class="line">                $connection-&gt;uid &#x3D; $message_data[&#39;orderId&#39;];</span><br><span class="line">                $worker-&gt;uidConnections[$connection-&gt;uid] &#x3D; $connection;</span><br><span class="line">                $return &#x3D; success(&#39;login success, your orderId is &#39; . $connection-&gt;uid, [], 201);</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            &#x2F;&#x2F; 服务端通知客户端</span><br><span class="line">            case &#39;qrPayNotify&#39;:</span><br><span class="line">                if (empty($message_data[&#39;orderId&#39;])) &#123;</span><br><span class="line">                    $return &#x3D; error(&#39;empty orderId&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 发送给订单</span><br><span class="line">                sendMessageByUid($message_data[&#39;orderId&#39;], success(&#39;success&#39;));</span><br><span class="line">                $return &#x3D; success(&#39;success&#39;);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                $return &#x3D; error(&#39;error type&#39;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $connection-&gt;send($return);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; 针对uid推送数据</span><br><span class="line">function sendMessageByUid($uid, $message)</span><br><span class="line">&#123;</span><br><span class="line">    global $worker;</span><br><span class="line">    if(isset($worker-&gt;uidConnections[$uid]))</span><br><span class="line">    &#123;</span><br><span class="line">        $connection &#x3D; $worker-&gt;uidConnections[$uid];</span><br><span class="line">        $connection-&gt;send($message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在回调的地方，进行websocket请求发送qrPayNotify</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 用到了一个客户端</span><br><span class="line">composer require textalk&#x2F;websocket</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    $client &#x3D; new Client($notify_websocket);</span><br><span class="line">    $payload &#x3D; [</span><br><span class="line">        &#39;type&#39; &#x3D;&gt; &#39;qrPayNotify&#39;,</span><br><span class="line">        &#39;orderId&#39; &#x3D;&gt; $params[&#39;orderId&#39;]</span><br><span class="line">    ];</span><br><span class="line">    $client-&gt;send(json_encode($payload));</span><br><span class="line">    $message &#x3D; $client-&gt;receive();</span><br><span class="line">&#125; catch (\Exception $e)&#123;</span><br><span class="line">    &#x2F;&#x2F; websocket发送失败，但是不抛出异常</span><br><span class="line">    $message &#x3D; $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>经过测试，通过了</p><h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><p>使用到这种，最好做一下参数加密或者认证之类的，我这里只是提供了原理。服务进程记得加上<a href="http://doc.workerman.net/faq/start-with-system.html" target="_blank" rel="noopener">开机启动</a></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>目前看来，项目运行正常，没啥问题。后续有问题的话，肯定是上强大的GatewayWorker啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://blog.lihq.xyz/categories/PHP/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
      <category term="fix bug" scheme="https://blog.lihq.xyz/tags/fix-bug/"/>
    
      <category term="workerman" scheme="https://blog.lihq.xyz/tags/workerman/"/>
    
  </entry>
  
  <entry>
    <title>PHP 常用过滤器</title>
    <link href="https://blog.lihq.xyz/2019/08/28/php-common-filters/"/>
    <id>https://blog.lihq.xyz/2019/08/28/php-common-filters/</id>
    <published>2019-08-28T08:16:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="PHP-常用过滤器"><a href="#PHP-常用过滤器" class="headerlink" title="PHP 常用过滤器"></a>PHP 常用过滤器</h1><blockquote><p>平时用到的框架，基本都实现了表单验证，探究一下他们的代码，就会发现，使用了大量的过滤器和正则。果然PHP是世界上最好的语言！！！哈哈哈</p></blockquote><h3 id="filter-has-var"><a href="#filter-has-var" class="headerlink" title="filter_has_var"></a>filter_has_var</h3><h4 id="笨拙的方法"><a href="#笨拙的方法" class="headerlink" title="笨拙的方法"></a>笨拙的方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">"name"</span>])</span><br></pre></td></tr></table></figure></div><h4 id="最好的语言提供的方法"><a href="#最好的语言提供的方法" class="headerlink" title="最好的语言提供的方法"></a>最好的语言提供的方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_has_var(INPUT_GET, <span class="string">"name"</span>)</span><br></pre></td></tr></table></figure></div><h6 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h6><p>成功时返回 <strong>TRUE</strong>， 或者在失败时返回 <strong>FALSE</strong>。</p><blockquote><p>第一个参数可以填入的值有，看英文应该懂是啥意思吧ヽ(ー_ー)ノ</p></blockquote><table><thead><tr><th align="left">type</th></tr></thead><tbody><tr><td align="left">INPUT_GET</td></tr><tr><td align="left">INPUT_POST</td></tr><tr><td align="left">INPUT_COOKIE</td></tr><tr><td align="left">INPUT_SERVER</td></tr><tr><td align="left">INPUT_ENV</td></tr></tbody></table><h3 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var"></a><strong>filter_var</strong></h3><h4 id="笨拙的方法-1"><a href="#笨拙的方法-1" class="headerlink" title="笨拙的方法"></a>笨拙的方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">疯狂正则，疯狂字符串拆解</span><br></pre></td></tr></table></figure></div><h4 id="优秀的语言提供的方法"><a href="#优秀的语言提供的方法" class="headerlink" title="优秀的语言提供的方法"></a>优秀的语言提供的方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_var(<span class="string">"hhh@qq.com"</span>, FILTER_VALIDATE_EMAIL);</span><br></pre></td></tr></table></figure></div><h6 id="返回值：-1"><a href="#返回值：-1" class="headerlink" title="返回值："></a>返回值：</h6><p>如果OK 会返回原值，如果不OK 则返回false</p><h6 id="验证过滤"><a href="#验证过滤" class="headerlink" title="验证过滤"></a>验证过滤</h6><table><thead><tr><th>FILTER</th><th>DESC</th></tr></thead><tbody><tr><td>FILTER_VALIDATE_BOOLEAN</td><td>当第一个参数是”1″, “true”, “on” and “yes” 这些字符串时会返回true .否则为false</td></tr><tr><td>FILTER_VALIDATE_EMAIL</td><td>验证是否邮箱地址</td></tr><tr><td>FILTER_VALIDATE_FLOAT</td><td>浮点</td></tr><tr><td>FILTER_VALIDATE_INT</td><td>整形</td></tr><tr><td>FILTER_VALIDATE_IP</td><td>IP地址</td></tr><tr><td>FILTER_VALIDATE_MAC</td><td>物理MAC地址</td></tr><tr><td>FILTER_VALIDATE_REGEXP</td><td>正则表达式</td></tr><tr><td>FILTER_VALIDATE_URL</td><td>URL网址</td></tr></tbody></table><h6 id="净化过滤，常用的几个"><a href="#净化过滤，常用的几个" class="headerlink" title="净化过滤，常用的几个"></a>净化过滤，常用的几个</h6><table><thead><tr><th>FILTER</th><th>DESC</th><th>EXEMPLE</th></tr></thead><tbody><tr><td>FILTER_SANITIZE_NUMBER_INT</td><td>过滤掉非数字型的内容</td><td><code>filter_var(&#39;test123&#39;, FILTER_SANITIZE_NUMBER_INT)</code> 返回”123”</td></tr><tr><td>FILTER_SANITIZE_MAGIC_QUOTES</td><td>对字符串执行 addslashes() 函数</td><td><code>filter_var(&quot;test&#39;456&quot;, FILTER_SANITIZE_MAGIC_QUOTES)</code> 返回”test&#39;456”</td></tr><tr><td>FILTER_SANITIZE_STRING</td><td>过滤器去除或编码不需要的字符</td><td><code>filter_var(&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;, FILTER_SANITIZE_STRING)</code> 返回”alert(&#39;xss&#39;)”</td></tr></tbody></table><p>如果想要了解更多的话，查看官方文档是最好的选择</p><p><a href="https://www.php.net/manual/zh/function.filter-var.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.filter-var.php</a></p><h3 id="多动手才是最好的学习途径，加油"><a href="#多动手才是最好的学习途径，加油" class="headerlink" title="多动手才是最好的学习途径，加油"></a>多动手才是最好的学习途径，加油</h3><p>自己动手，丰衣足食 示例代码：<a href="https://github.com/lihq1403/gadget/blob/master/filter-function/filter.php" target="_blank" rel="noopener">https://github.com/lihq1403/gadget/blob/master/filter-function/filter.php</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Github 的 Restful HTTP API 设计分解</title>
    <link href="https://blog.lihq.xyz/2019/08/26/design-decomposition-of-githubs-restful-http-api/"/>
    <id>https://blog.lihq.xyz/2019/08/26/design-decomposition-of-githubs-restful-http-api/</id>
    <published>2019-08-26T08:17:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文地址：<br><a href="https://learnku.com/courses/laravel-advance-training/5.8/follow-github-to-learn-restful-http-api-design/3989" target="_blank" rel="noopener">Github 的 Restful HTTP API 设计分解</a></p></blockquote><h2 id="什么是-RESTful"><a href="#什么是-RESTful" class="headerlink" title="什么是 RESTful"></a>什么是 RESTful</h2><p>RESTful 是一种软件设计风格，由 <a href="http://roy.gbiv.com/" target="_blank" rel="noopener">Roy Fielding</a> 在他的 <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">论文</a> 中提出，全称为 <code>Representational State Transfer</code>，直译为<code>表现层状态转移</code>，或许可以解释为<code>用 URL 定位资源，用 HTTP 动词描述操作</code>，不用太纠结于定义，接下来我们会详细讨论。</p><p>RESTful 风格的接口，目前来看，实现的最好的就是 <a href="https://developer.github.com/v3/" target="_blank" rel="noopener">Github API</a>，经常被效仿。接下来我们通过分析 Github API 来引出我们的 API 设计原则。</p><h2 id="为什么选择-RESTful"><a href="#为什么选择-RESTful" class="headerlink" title="为什么选择 RESTful"></a>为什么选择 RESTful</h2><p>我认为一套接口应该尽量满足以下几个原则：</p><ul><li>安全可靠，高效，易扩展。</li><li>简单明了，可读性强，没有歧义。</li><li>API 风格统一，调用规则，传入参数和返回数据有统一的标准。</li></ul><p>我们当然可以根据自己的经验，或者参考知名公司的接口总结设计出一套满足要求的接口，但是每个人对接口的理解不同，设计出来的接口也会有所不同，接口的命名，请求参数的格式，响应的结果，错误响应的错误码，等等很多地方都会有不一样的实现。当你去寻求一种设计理念来帮助我们设计出满足要求的接口，一定会发现 RESTful。<br>RESTful 的设计理念基于 HTTP 协议，因为 <a href="http://roy.gbiv.com/" target="_blank" rel="noopener">Roy Fielding</a> 就是 HTTP 协议（1.0版和1.1版）的主要设计者。它是一种设计风格，没有规定我们一定如何实现，但是为我们提供了很好的设计理念。风格的统一，使得我们不需要过多的解释，就能让使用者明白该如何使用，同时也会有很多现成的工具来帮助我们实现 RESTful 风格的接口。</p><h2 id="RESTful-设计原则"><a href="#RESTful-设计原则" class="headerlink" title="RESTful 设计原则"></a>RESTful 设计原则</h2><h3 id="1-HTTPS"><a href="#1-HTTPS" class="headerlink" title="1. HTTPS"></a>1. HTTPS</h3><p>HTTPS 为接口的安全提供了保障，可以有效防止通信被窃听和篡改。而且现在部署 HTTPS 的成本也越来越低，你可以通过 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">cerbot</a> 等工具，方便快速的制作免费的安全证书，所以生产环境，请务必使用 HTTPS。</p><blockquote><p>另外注意，非 HTTPS 的 API 调用，不要重定向到 HTTPS，而要直接返回调用错误以禁止不安全的调用。</p></blockquote><h3 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h3><p>应当尽可能的将 API 与其主域名区分开，可以使用专用的域名，访问我们的 API，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.larabbs.com</span><br></pre></td></tr></table></figure></div><p>或者可以放在主域名下，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.larabbs.com&#x2F;api</span><br></pre></td></tr></table></figure></div><h3 id="3-版本控制"><a href="#3-版本控制" class="headerlink" title="3. 版本控制"></a>3. 版本控制</h3><p>随着业务的发展，需求的不断变化，API 的迭代是必然的，很可能当前版本正在使用，而我们就得开发甚至上线一个不兼容的新版本，为了让旧用户可以正常使用，为了保证开发的顺利进行，我们需要控制好 API 的版本。</p><p>通常情况下，有两种做法：</p><ul><li>将版本号直接加入 URL 中  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.larabbs.com&#x2F;v1</span><br><span class="line">https:&#x2F;&#x2F;api.larabbs.com&#x2F;v2</span><br></pre></td></tr></table></figure></div></li><li>使用 HTTP 请求头的 Accept 字段进行区分  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.larabbs.com&#x2F;</span><br><span class="line">Accept: application&#x2F;prs.larabbs.v1+json</span><br><span class="line">Accept: application&#x2F;prs.larabbs.v2+json</span><br></pre></td></tr></table></figure></div>Github Api 虽然默认使用了第一种方法，但是其实是推荐并实现了第二种方法的，我们同样也尽量使用第二种方式。<br><a href="https://learnku.com/uploads/images/201712/20/6351/iVESOhNlvt.png" data-fancybox="group" data-caption="file" class="fancybox"><img alt="file" title="file" data-src="https://learnku.com/uploads/images/201712/20/6351/iVESOhNlvt.png" class="lazyload"></a></li></ul><h3 id="4-用-URL-定位资源"><a href="#4-用-URL-定位资源" class="headerlink" title="4. 用 URL 定位资源"></a>4. 用 URL 定位资源</h3><p>在 RESTful 的架构中，所有的一切都表示资源，每一个 URL 都代表着一种资源，资源应当是一个名词，而且大部分情况下是名词的复数，尽量不要在 URL 中出现动词。<br>先来看看 github 的 <a href="https://developer.github.com/v3/issues/comments/" target="_blank" rel="noopener">例子</a>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;issues                                      列出所有的 issue</span><br><span class="line">GET &#x2F;orgs&#x2F;:org&#x2F;issues                            列出某个项目的 issue</span><br><span class="line">GET &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues&#x2F;:number           获取某个项目的某个 issue</span><br><span class="line">POST &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues                  为某个项目创建 issue</span><br><span class="line">PATCH &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues&#x2F;:number         修改某个 issue</span><br><span class="line">PUT &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues&#x2F;:number&#x2F;lock      锁住某个 issue</span><br><span class="line">DELETE &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues&#x2F;:number&#x2F;lock   解锁某个 issue</span><br></pre></td></tr></table></figure></div><blockquote><p>例子中冒号开始的代表变量，例如 /repos/summerblue/larabbs/issues </p></blockquote><p>在 github 的实现中，我们可以总结出：</p><ul><li>资源的设计可以嵌套，表明资源与资源之间的关系。</li><li>大部分情况下我们访问的是某个<code>资源集合</code>，想得到<code>单个资源</code>可以通过资源的 id 或number 等唯一标识获取。</li><li>某些情况下，资源会是单数形式，例如<code>某个项目某个 issue 的锁</code>，每个 issue 只会有一把锁，所以它是单数。</li></ul><p>错误的例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST https:&#x2F;&#x2F;api.larabbs.com&#x2F;createTopic</span><br><span class="line">GET https:&#x2F;&#x2F;api.larabbs.com&#x2F;topic&#x2F;show&#x2F;1</span><br><span class="line">POST https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics&#x2F;1&#x2F;comments&#x2F;create</span><br><span class="line">POST https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics&#x2F;1&#x2F;comments&#x2F;100&#x2F;delete</span><br></pre></td></tr></table></figure></div><p>正确的例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics</span><br><span class="line">GET https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics&#x2F;1</span><br><span class="line">POST https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics&#x2F;1&#x2F;comments</span><br><span class="line">DELETE https:&#x2F;&#x2F;api.larabbs.com&#x2F;topics&#x2F;1&#x2F;comments&#x2F;100</span><br></pre></td></tr></table></figure></div><h3 id="5-用-HTTP-动词描述操作"><a href="#5-用-HTTP-动词描述操作" class="headerlink" title="5. 用 HTTP 动词描述操作"></a>5. 用 HTTP 动词描述操作</h3><p>HTTP 设计了很多动词，来表示不同的操作，RESTful 很好的利用的这一点，我们需要正确的使用 HTTP 动词，来表明我们要如何操作资源。<br>先来解释一个概念，<code>幂等性</code>，指一次和多次请求某一个资源应该具有同样的副作用，也就是一次访问与多次访问，对这个资源带来的变化是相同的。</p><p>常用的动词及幂等性</p><table><thead><tr><th>动词</th><th>描述</th><th>是否幂等</th></tr></thead><tbody><tr><td>GET</td><td>获取资源，单个或多个</td><td>是</td></tr><tr><td>POST</td><td>创建资源</td><td>否</td></tr><tr><td>PUT</td><td>更新资源，客户端提供完整的资源数据</td><td>是</td></tr><tr><td>PATCH</td><td>更新资源，客户端提供部分的资源数据</td><td>否</td></tr><tr><td>DELETE</td><td>删除资源</td><td>是</td></tr></tbody></table><blockquote><p>为什么 PUT 是幂等的而 PATCH 是非幂等的，因为 PUT 是根据客户端提供了完整的资源数据，客户端提交什么就替换为什么，而 PATCH 有可能是根据客户端提供的参数，动态的计算出某个值，例如每次请求后资源的某个参数减1，所以多次调用，资源会有不同的变化。</p></blockquote><p>另外需要注意的是，GET 请求对于资源来说是安全的，不允许通过 GET 请求改变（更新或创建）资源，但是真实使用中，为了方便统计类的数据，会有一些例外情况，例如帖子详情，记录访问次数，每调用一次，访问次数 +1;</p><h3 id="6-资源过滤"><a href="#6-资源过滤" class="headerlink" title="6. 资源过滤"></a>6. 资源过滤</h3><p>我们需要提供合理的参数供客户端过滤资源，例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?state&#x3D;closed: 不同状态的资源</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：访问第几页数据，每页多少条。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure></div><h3 id="7-正确使用状态码"><a href="#7-正确使用状态码" class="headerlink" title="7. 正确使用状态码"></a>7. 正确使用状态码</h3><p>HTTP 提供了丰富的状态码供我们使用，正确的使用状态码可以让响应数据更具可读性。</p><ul><li>200 OK - 对成功的 GET、PUT、PATCH 或 DELETE 操作进行响应。也可以被用在不创建新资源的 POST 操作上</li><li>201 Created - 对创建新资源的 POST 操作进行响应。应该带着指向新资源地址的 Location 头</li><li>202 Accepted - 服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息</li><li>204 No Content - 对不会返回响应体的成功请求进行响应（比如 DELETE 请求）</li><li>304 Not Modified - HTTP缓存header生效的时候用</li><li>400 Bad Request - 请求异常，比如请求中的body无法解析</li><li>401 Unauthorized - 没有进行认证或者认证非法</li><li>403 Forbidden - 服务器已经理解请求，但是拒绝执行它</li><li>404 Not Found - 请求一个不存在的资源</li><li>405 Method Not Allowed - 所请求的 HTTP 方法不允许当前认证用户访问</li><li>410 Gone - 表示当前请求的资源不再可用。当调用老版本 API 的时候很有用</li><li>415 Unsupported Media Type - 如果请求中的内容类型是错误的</li><li>422 Unprocessable Entity - 用来表示校验错误</li><li>429 Too Many Requests - 由于请求频次达到上限而被拒绝访问</li></ul><h3 id="8-数据响应格式"><a href="#8-数据响应格式" class="headerlink" title="8. 数据响应格式"></a>8. 数据响应格式</h3><p>考虑到响应数据的可读性及通用性，默认使用 JSON 作为数据响应格式。如果客户端有需求使用其他的响应格式，例如 XML，需要在 Accept 头中指定需要的格式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.larabbs.com&#x2F;</span><br><span class="line">Accept: application&#x2F;prs.larabbs.v1+json</span><br><span class="line">Accept: application&#x2F;prs.larabbs.v1+xml</span><br></pre></td></tr></table></figure></div><p>对于错误数据，默认使用如下结构：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39;message&#39; &#x3D;&gt; &#39;:message&#39;,          &#x2F;&#x2F; 错误的具体描述</span><br><span class="line">&#39;errors&#39; &#x3D;&gt; &#39;:errors&#39;,            &#x2F;&#x2F; 参数的具体错误描述，422 等状态提供</span><br><span class="line">&#39;code&#39; &#x3D;&gt; &#39;:code&#39;,                &#x2F;&#x2F; 自定义的异常码</span><br><span class="line">&#39;status_code&#39; &#x3D;&gt; &#39;:status_code&#39;,  &#x2F;&#x2F; http状态码</span><br><span class="line">&#39;debug&#39; &#x3D;&gt; &#39;:debug&#39;,              &#x2F;&#x2F; debug 信息，非生产环境提供</span><br></pre></td></tr></table></figure></div><p>例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;422 Unprocessable Entity&quot;,</span><br><span class="line">    &quot;errors&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: [</span><br><span class="line">            &quot;姓名 必须为字符串。&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status_code&quot;: 422</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;您无权访问该订单&quot;,</span><br><span class="line">    &quot;status_code&quot;: 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="9-调用频率限制"><a href="#9-调用频率限制" class="headerlink" title="9. 调用频率限制"></a>9. 调用频率限制</h3><p>为了防止服务器被攻击，减少服务器压力，需要对接口进行合适的限流控制，需要在响应头信息中加入合适的信息，告知客户端当前的限流情况</p><ul><li>X-RateLimit-Limit :100     最大访问次数</li><li>X-RateLimit-Remaining :93   剩余的访问次数</li><li>X-RateLimit-Reset :1513784506   到该时间点，访问次数会重置为 <code>X-RateLimit-Limit</code></li></ul><p>超过限流次数后，需要返回 <code>429 Too Many Requests</code> 错误。</p><h3 id="10-编写文档"><a href="#10-编写文档" class="headerlink" title="10. 编写文档"></a>10. 编写文档</h3><p>为了方便用户使用，我们需要提供清晰的文档，尽可能包括以下几点</p><ul><li>包括每个接口的请求参数，每个参数的类型限制，是否必填，可选的值等。</li><li>响应结果的例子说明，包括响应结果中，每个参数的释义。</li><li>对于某一类接口，需要有尽量详细的文字说明，比如针对一些特定场景，接口应该如何调用。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面讲到知识点，不需要强记，后面我们都会在实战中进行讲解，这里同学们有个大的概念即可。本课程学习完成后，你再回来看本文，就能清晰的理解这里讲的每一个概念，作为一个合格的 API 工程师，以上的知识点都是必备的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="转载" scheme="https://blog.lihq.xyz/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="php" scheme="https://blog.lihq.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践之安装篇</title>
    <link href="https://blog.lihq.xyz/2019/08/23/installation-of-docker-practice/"/>
    <id>https://blog.lihq.xyz/2019/08/23/installation-of-docker-practice/</id>
    <published>2019-08-23T11:53:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[TOC]</p><blockquote><p>由于重新搞了虚拟机，所以docker也要重新安装了</p></blockquote><h2 id="了解docker"><a href="#了解docker" class="headerlink" title="了解docker"></a>了解docker</h2><blockquote><p><a href="https://www.baidu.com/s?wd=docker" target="_blank" rel="noopener">百度一下，哈哈哈哈</a></p></blockquote><h2 id="打开官方文档"><a href="#打开官方文档" class="headerlink" title="打开官方文档"></a>打开官方文档</h2><ul><li><a href="https://blog.csdn.net/yk20091201/article/details/80016135" target="_blank" rel="noopener">版本说明</a></li><li><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">我们选择：Docker Engine</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Centos7 Docker EE</a></li></ul><h2 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h2><blockquote><p>centos7的安装就很简单啦，添加稳定源去yum配置</p></blockquote><p>安装一些必要的系统工具：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></div><p>添加软件源信息：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure></div><p>更新 yum 缓存：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum makecache fast</span><br></pre></td></tr></table></figure></div><h4 id="没有yum-config-manager？"><a href="#没有yum-config-manager？" class="headerlink" title="没有yum-config-manager？"></a>没有yum-config-manager？</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></div><h4 id="之前装过了，有残留？"><a href="#之前装过了，有残留？" class="headerlink" title="之前装过了，有残留？"></a>之前装过了，有残留？</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></div><h2 id="安装中"><a href="#安装中" class="headerlink" title="安装中"></a>安装中</h2><h4 id="直接安装最新的"><a href="#直接安装最新的" class="headerlink" title="直接安装最新的"></a>直接安装最新的</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">略...</span><br></pre></td></tr></table></figure></div><h4 id="如果不要最新的，要自定义的话，可以先查看相关版本"><a href="#如果不要最新的，要自定义的话，可以先查看相关版本" class="headerlink" title="如果不要最新的，要自定义的话，可以先查看相关版本"></a>如果不要最新的，要自定义的话，可以先查看相关版本</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;repodata&#x2F;dd13ede13493c87b8ed6c08b710ec1fe318a71fc5f37ae3703890fd37ed1dd43-primary.sqlite.bz2: [Errno 12] Timeout on https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;repodata&#x2F;dd13ede13493c87b8ed6c08b710ec1fe318a71fc5f37ae3703890fd37ed1dd43-primary.sqlite.bz2: (28, &#39;Operation too slow. Less than 1000 bytes&#x2F;sec transferred the last 30 seconds&#39;)</span><br><span class="line">Trying other mirror.</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure></div><h4 id="自由选择"><a href="#自由选择" class="headerlink" title="自由选择"></a>自由选择</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure></div><h2 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h2><h4 id="启动，并开机启动"><a href="#启动，并开机启动" class="headerlink" title="启动，并开机启动"></a>启动，并开机启动</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure></div><h4 id="测试安装结果"><a href="#测试安装结果" class="headerlink" title="测试安装结果"></a>测试安装结果</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.1</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.5</span><br><span class="line"> Git commit:        74b1e89</span><br><span class="line"> Built:             Thu Jul 25 21:21:07 2019</span><br><span class="line"> OS&#x2F;Arch:           linux&#x2F;amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.1</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.5</span><br><span class="line">  Git commit:       74b1e89</span><br><span class="line">  Built:            Thu Jul 25 21:19:36 2019</span><br><span class="line">  OS&#x2F;Arch:          linux&#x2F;amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.6</span><br><span class="line">  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8</span><br><span class="line">  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure></div><h4 id="更换仓库源"><a href="#更换仓库源" class="headerlink" title="更换仓库源"></a>更换仓库源</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">我用的是七牛云的加速</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;reg-mirror.qiniu.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure></div><h4 id="跑一个helloword"><a href="#跑一个helloword" class="headerlink" title="跑一个helloword"></a>跑一个helloword</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &#39;hello-world:latest&#39; locally</span><br><span class="line">latest: Pulling from library&#x2F;hello-world</span><br><span class="line">1b930d010525: Pull complete</span><br><span class="line">Digest: sha256:451ce787d12369c5df2a32c85e5a03d52cbcef6eb3586dd03075f3034f10adcd</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https:&#x2F;&#x2F;hub.docker.com&#x2F;</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
      <category term="docker" scheme="https://blog.lihq.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant +Virtualbox 打造跨平台开发环境</title>
    <link href="https://blog.lihq.xyz/2019/08/20/vagrant-virtualbox-creates-development-environment/"/>
    <id>https://blog.lihq.xyz/2019/08/20/vagrant-virtualbox-creates-development-environment/</id>
    <published>2019-08-20T09:54:00.000Z</published>
    <updated>2020-08-19T10:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Vagrant-Virtualbox-打造跨平台开发环境"><a href="#Vagrant-Virtualbox-打造跨平台开发环境" class="headerlink" title="Vagrant +Virtualbox 打造跨平台开发环境"></a>Vagrant +Virtualbox 打造跨平台开发环境</h1><blockquote><p>为啥说是跨平台呢，因为这几个工具软件，每个系统都有相应的软件安装。还有一个原因是，作为一名程序员，应该==多多使用Linux嘛==，哈哈哈！！！</p></blockquote><h2 id="安装所需工具"><a href="#安装所需工具" class="headerlink" title="安装所需工具"></a>安装所需工具</h2><ul><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a></li><li><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Virtualbox</a></li><li><a href="https://cloud.centos.org/centos/7/vagrant/x86_64/images/" target="_blank" rel="noopener">Centos7 box</a></li></ul><blockquote><p>全都下载最新版本的就好啦，哈哈哈，先将工具都下载好了，后面的事就好办了</p></blockquote><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><blockquote><p>vagrant + virtualbox 的安装就不说了（so easy），记得vagrant安装完，如果点击yes，会重启电脑的（ps：亲测，貌似不重启也可以使用的）</p></blockquote><h3 id="vagrant-常用命令"><a href="#vagrant-常用命令" class="headerlink" title="vagrant 常用命令"></a>vagrant 常用命令</h3><blockquote><p>先了解一些基本常识 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vagrant init      # 初始化，生成Vagrantfile</span><br><span class="line"></span><br><span class="line">vagrant up        # 启动虚拟机</span><br><span class="line">vagrant halt      # 关闭虚拟机</span><br><span class="line">vagrant reload    # 重启虚拟机</span><br><span class="line">vagrant ssh       # SSH 至虚拟机</span><br><span class="line">vagrant suspend   # 挂起虚拟机</span><br><span class="line">vagrant resume    # 唤醒虚拟机</span><br><span class="line">vagrant status    # 查看虚拟机运行状态</span><br><span class="line">vagrant destroy   # 销毁当前虚拟机</span><br><span class="line"></span><br><span class="line">#box管理命令</span><br><span class="line">vagrant box list    # 查看本地box列表</span><br><span class="line">vagrant box add     # 添加box到列表</span><br><span class="line">vagrant box remove  # 从box列表移除 </span><br><span class="line"></span><br><span class="line"># 修改了配置需要启动或重启</span><br><span class="line">vagrant provision</span><br><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure></div><h2 id="添加box"><a href="#添加box" class="headerlink" title="添加box"></a>添加box</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add [box名称] [下载的box文件路径]</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add centos7 CentOS-7-x86_64-Vagrant-1907_01.VirtualBox.box</span><br><span class="line">&#x3D;&#x3D;&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">&#x3D;&#x3D;&gt; box: Adding box &#39;centos7&#39; (v0) for provider:</span><br><span class="line">    box: Unpacking necessary files from: file:&#x2F;&#x2F;E:&#x2F;work&#x2F;box&#x2F;CentOS-7-x86_64-Vagrant-1907_01.VirtualBox.box</span><br><span class="line">    box:</span><br><span class="line">&#x3D;&#x3D;&gt; box: Successfully added box &#39;centos7&#39; (v0) for &#39;virtualbox&#39;!</span><br></pre></td></tr></table></figure></div><h3 id="box-初始化"><a href="#box-初始化" class="headerlink" title="box 初始化"></a>box 初始化</h3><blockquote><p>新建一个目录，用来保存虚拟机配置文件，以后的操作都是在这里进行了，我这里是E:/work/box/</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init</span><br><span class="line">A &#96;Vagrantfile&#96; has been placed in this directory. You are now</span><br><span class="line">ready to &#96;vagrant up&#96; your first virtual environment! Please read</span><br><span class="line">the comments in the Vagrantfile as well as documentation on</span><br><span class="line">&#96;vagrantup.com&#96; for more information on using Vagrant.</span><br></pre></td></tr></table></figure></div><h3 id="Vagrantfile-文件小修改"><a href="#Vagrantfile-文件小修改" class="headerlink" title="Vagrantfile 文件小修改"></a>Vagrantfile 文件小修改</h3><ul><li><a href="https://www.baidu.com/s?wd=Vagrantfile%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">具体配置说明</a></li></ul><blockquote><p>我这里就是改了几个地方</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># box名称修改</span><br><span class="line">config.vm.box &#x3D; &quot;centos7&quot;</span><br><span class="line"></span><br><span class="line"># 将网络变成私有网络，这样的话，就不需要去做端口转发了，具体ip值的话，建议先去网络共享中心看看网卡是啥，一般是这个：VirtualBox Host-Only Network</span><br><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot; </span><br><span class="line"></span><br><span class="line"># 共享目录，主要是放代码的目录，在centos里面会变成777的 (ps:nfs模式的共享磁盘，可以加快共享目录文件读取，需要先vagrant plugin install vagrant-winnfsd)</span><br><span class="line">config.vm.synced_folder &quot;.&#x2F;..&#x2F;www&quot;, &quot;&#x2F;home&#x2F;wwwroot&quot;, type: &quot;nfs&quot;</span><br></pre></td></tr></table></figure></div><h2 id="box-启动"><a href="#box-启动" class="headerlink" title="box 启动"></a>box 启动</h2><blockquote><p>在当前目录启动哦，因为要读取你刚刚修改的Vagrantfile；第一次的话，会比较慢，因为要创建虚拟机，后面启动就很快啦</p></blockquote><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Importing base box &#39;centos7&#39;...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Matching MAC address for NAT networking...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Setting the name of the VM: box_default_1566287914381_38916</span><br><span class="line">&#x3D;&#x3D;&gt; default: Clearing any previously set network interfaces...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">    default: Adapter 2: hostonly</span><br><span class="line">&#x3D;&#x3D;&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) &#x3D;&gt; 2222 (host) (adapter 1)</span><br><span class="line">&#x3D;&#x3D;&gt; default: Booting VM...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Waiting for machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default:</span><br><span class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    default: this with a newly generated keypair for better security.</span><br><span class="line">    default:</span><br><span class="line">    default: Inserting generated public key within guest...</span><br><span class="line">    default: Removing insecure key from the guest if it&#39;s present...</span><br><span class="line">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Machine booted and ready!</span><br><span class="line">&#x3D;&#x3D;&gt; default: Checking for guest additions in VM...</span><br><span class="line">    default: No guest additions were detected on the base box for this VM! Guest</span><br><span class="line">    default: additions are required for forwarded ports, shared folders, host only</span><br><span class="line">    default: networking, and more. If SSH fails on this machine, please install</span><br><span class="line">    default: the guest additions and repackage the box to continue.</span><br><span class="line">    default:</span><br><span class="line">    default: This is not an error message; everything may continue to work properly,</span><br><span class="line">    default: in which case you may ignore this message.</span><br><span class="line">&#x3D;&#x3D;&gt; default: Configuring and enabling network interfaces...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">&#x3D;&#x3D;&gt; default: Rsyncing folder: &#x2F;cygdrive&#x2F;e&#x2F;work&#x2F;box&#x2F; &#x3D;&gt; &#x2F;vagrant</span><br><span class="line">&#x3D;&#x3D;&gt; default: Mounting shared folders...</span><br><span class="line">    default: &#x2F;home&#x2F;wwwroot &#x3D;&gt; E:&#x2F;work&#x2F;www</span><br><span class="line">Vagrant was unable to mount VirtualBox shared folders. This is usually</span><br><span class="line">because the filesystem &quot;vboxsf&quot; is not available. This filesystem is</span><br><span class="line">made available via the VirtualBox Guest Additions and kernel module.</span><br><span class="line">Please verify that these guest additions are properly installed in the</span><br><span class="line">guest. This is not a bug in Vagrant and is usually caused by a faulty</span><br><span class="line">Vagrant box. For context, the command attempted was:</span><br><span class="line"></span><br><span class="line">mount -t vboxsf -o uid&#x3D;1000,gid&#x3D;1000 home_wwwroot &#x2F;home&#x2F;wwwroot</span><br><span class="line"></span><br><span class="line">The error output from the command was:</span><br><span class="line"></span><br><span class="line">mount: unknown filesystem type &#39;vboxsf&#39;</span><br></pre></td></tr></table></figure></div><blockquote><p>好像看到不得了的东西，出问题了！！！</p></blockquote><ol><li>不要慌，问题不大</li><li>打开浏览器</li><li>飞快的键入问题”mount: unknown filesystem type ‘vboxsf”</li><li>回车，会发现原来有很多人跟咱们一样，哈哈哈，心理平衡了</li></ol><h3 id="解决-mount-unknown-filesystem-type-‘vboxsf’"><a href="#解决-mount-unknown-filesystem-type-‘vboxsf’" class="headerlink" title="解决 mount: unknown filesystem type ‘vboxsf’"></a>解决 mount: unknown filesystem type ‘vboxsf’</h3><blockquote><p>其实就是缺少了挂载插件，装上就好了</p></blockquote><h6 id="1、我们先关闭虚拟机"><a href="#1、我们先关闭虚拟机" class="headerlink" title="1、我们先关闭虚拟机"></a>1、我们先关闭虚拟机</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant halt</span><br><span class="line">&#x3D;&#x3D;&gt; default: Attempting graceful shutdown of VM...</span><br></pre></td></tr></table></figure></div><h6 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant plugin install vagrant-vbguest</span><br><span class="line">Installing the &#39;vagrant-vbguest&#39; plugin. This can take a few minutes...</span><br><span class="line">Installed the plugin &#39;vagrant-vbguest (0.19.0)&#39;!</span><br></pre></td></tr></table></figure></div><h6 id="3、再次启动"><a href="#3、再次启动" class="headerlink" title="3、再次启动"></a>3、再次启动</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">安装过程略多，此处省略...</span><br><span class="line"></span><br><span class="line">最后没有报错，就启动成功了</span><br></pre></td></tr></table></figure></div><h2 id="进入box"><a href="#进入box" class="headerlink" title="进入box"></a>进入box</h2><blockquote><p>vagrant的box安装好了之后，默认的账号有俩个【vagrant vagrant (普通权限)】【root vagrant (root权限)】</p></blockquote><blockquote><p>启动的时候，有没有发现一行 SSH address: 127.0.0.1:2222 没错，他会自己开启一个本地连接端口的</p></blockquote><h4 id="尝试ssh账号密码"><a href="#尝试ssh账号密码" class="headerlink" title="尝试ssh账号密码"></a>尝试ssh账号密码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 root@127.0.0.1</span><br><span class="line">The authenticity of host &#39;[127.0.0.1]:2222 ([127.0.0.1]:2222)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:sLcP3X75TMzTjmeolLXX7BqpD+Psrq6vU7haTYyM&#x2F;&#x2F;4.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;[127.0.0.1]:2222&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">root@127.0.0.1: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</span><br></pre></td></tr></table></figure></div><blockquote><p>咦，进不去。不要慌，其实只是因为是新的box，并没有开启ssh密码访问模式，我们换个方式进去</p></blockquote><h4 id="尝试vagrant-ssh"><a href="#尝试vagrant-ssh" class="headerlink" title="尝试vagrant ssh"></a>尝试vagrant ssh</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br><span class="line">[vagrant@10 ~]$</span><br></pre></td></tr></table></figure></div><blockquote><p>666，进去了，接下里就是开启一下密码访问模式（其实不开也没问题，用ssh密钥去连接就好了，我是出于习惯，所以想开启密码访问）</p></blockquote><h5 id="开启密码模式"><a href="#开启密码模式" class="headerlink" title="开启密码模式"></a>开启密码模式</h5><h6 id="1、打开ssh配置"><a href="#1、打开ssh配置" class="headerlink" title="1、打开ssh配置"></a>1、打开ssh配置</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure></div><h6 id="2、修改内容"><a href="#2、修改内容" class="headerlink" title="2、修改内容"></a>2、修改内容</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no 改为 PasswordAuthentication yes</span><br></pre></td></tr></table></figure></div><h6 id="3、保存退出"><a href="#3、保存退出" class="headerlink" title="3、保存退出"></a>3、保存退出</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure></div><h6 id="4、重启ssh"><a href="#4、重启ssh" class="headerlink" title="4、重启ssh"></a>4、重启ssh</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart sshd.service</span><br></pre></td></tr></table></figure></div><h4 id="再次尝试ssh账号密码"><a href="#再次尝试ssh账号密码" class="headerlink" title="再次尝试ssh账号密码"></a>再次尝试ssh账号密码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 root@127.0.0.1</span><br><span class="line">root@127.0.0.1&#39;s password:</span><br><span class="line">Last login: Tue Aug 20 08:30:58 2019 from 10.0.2.2</span><br><span class="line">[root@10 ~]#</span><br></pre></td></tr></table></figure></div><blockquote><p>完美！！！</p></blockquote><h2 id="进行box更新"><a href="#进行box更新" class="headerlink" title="进行box更新"></a>进行box更新</h2><ul><li><a href="https://www.baidu.com/s?wd=centos7%E4%BF%AE%E6%94%B9yum%E6%BA%90" target="_blank" rel="noopener">第一步当然是修改yum源啦</a></li></ul><p>更新系统：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y update</span><br></pre></td></tr></table></figure></div><h2 id="PHP开发环境搭建"><a href="#PHP开发环境搭建" class="headerlink" title="PHP开发环境搭建"></a>PHP开发环境搭建</h2><blockquote><p>我使用过三套方案，各有各的优势，所以我选择宝塔 -.-</p></blockquote><ol><li>nginx/apache php mysql 一个一个编译安装</li><li><a href="https://lnmp.org/" target="_blank" rel="noopener">lnmp一键包</a></li><li><a href="https://www.bt.cn/" target="_blank" rel="noopener">宝塔服务器运维面板</a></li></ol><h4 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h4><blockquote><p>因为我们装的是centos7，所以十分契合宝塔面板</p></blockquote><p>开始漫长的安装之旅</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line">略...</span><br><span class="line"></span><br><span class="line">Starting Bt-Panel... Bt-Panel (pid 3757 3776) already running</span><br><span class="line">Starting Bt-Tasks... Bt-Tasks (pid 3790) already running</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Congratulations! Installed successfully!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Bt-Panel: http:&#x2F;&#x2F;116.18.22.120:8888&#x2F;0dafbc37</span><br><span class="line">username: c0ryrxbk</span><br><span class="line">password: fde1ff6a</span><br><span class="line">Warning:</span><br><span class="line">If you cannot access the panel,</span><br><span class="line">release the following port (8888|888|80|443|20|21) in the security group</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Time consumed: 2 Minute!</span><br></pre></td></tr></table></figure></div><blockquote><p>原来只花了俩分钟，666。接下来，在浏览器上访问这个地址就好了，因为是虚拟机的原因，那个ip地址是不对的，我这里是<a href="http://192.168.56.10:8888/0dafbc37。输入账号密码，熟悉的画面" target="_blank" rel="noopener">http://192.168.56.10:8888/0dafbc37。输入账号密码，熟悉的画面</a></p></blockquote><p><a href="https://blog-1256184194.file.myqcloud.com/2019/12/23/a6f2d3e1b364f.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://blog-1256184194.file.myqcloud.com/2019/12/23/a6f2d3e1b364f.png" class="lazyload"></a></p><blockquote><p>才发现，原来默认的内存这么小，不行，要调大一点 （因为会不能安装mysql的）</p></blockquote><h6 id="修改box内存"><a href="#修改box内存" class="headerlink" title="修改box内存"></a>修改box内存</h6><p>打开Vagrantfile 将这部分开启，内存值的单位是MB，我这里相当于2GB</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">#   # Display the VirtualBox GUI when booting the machine</span><br><span class="line">#   vb.gui &#x3D; true</span><br><span class="line">#</span><br><span class="line">#   # Customize the amount of memory on the VM:</span><br><span class="line">#   vb.memory &#x3D; &quot;1024&quot;</span><br><span class="line">    vb.memory &#x3D; &quot;2048&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div><h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant reload --provision</span><br></pre></td></tr></table></figure></div><h4 id="必要软件安装"><a href="#必要软件安装" class="headerlink" title="必要软件安装"></a>必要软件安装</h4><ul><li>nginx 1.16</li><li>mysql 5.7</li><li>php 7.2</li></ul><blockquote><p>勾选，然后一键安装，贼简单</p></blockquote><h4 id="扩展软件"><a href="#扩展软件" class="headerlink" title="扩展软件"></a>扩展软件</h4><ul><li>PM2管理器</li><li>Redis</li><li>PHP守护</li><li>…</li></ul><blockquote><p>都在软件商店里面，根据自己的需求安装就好啦，安装好软件之后。1、根据自己需要装php扩展 2、根据自己需要，开启一些禁用函数</p></blockquote><h4 id="php扩展"><a href="#php扩展" class="headerlink" title="php扩展"></a>php扩展</h4><ul><li>fileinfo</li><li>redis</li><li>Swoole</li><li>bz2</li><li>…</li></ul><h4 id="php禁用函数"><a href="#php禁用函数" class="headerlink" title="php禁用函数"></a>php禁用函数</h4><ul><li>putenv</li><li>symlink</li><li>proc_ope n</li><li>…</li></ul><h4 id="漫长的安装之旅，都是后台运行的，切出去看个剧吧，哈哈哈"><a href="#漫长的安装之旅，都是后台运行的，切出去看个剧吧，哈哈哈" class="headerlink" title="漫长的安装之旅，都是后台运行的，切出去看个剧吧，哈哈哈"></a>漫长的安装之旅，都是后台运行的，切出去看个剧吧，哈哈哈</h4><p>本次大致耗时情况，仅供参考，肯定是性能越好，安装的越快啦。我这里才1核2G</p><table><thead><tr><th>软件</th><th>耗时</th></tr></thead><tbody><tr><td>nginx-1.16</td><td>159秒</td></tr><tr><td>mysql-5.7</td><td>81秒</td></tr><tr><td>php-7.2</td><td>10秒</td></tr><tr><td>redis-5.0</td><td>77秒</td></tr><tr><td>pm2-2.6</td><td>28秒</td></tr><tr><td>php扩展-fileinfo-72</td><td>24秒</td></tr><tr><td>php扩展-redis-72</td><td>13秒</td></tr><tr><td>php扩展-swoole4-72</td><td>86秒</td></tr><tr><td>php扩展-bz2-72</td><td>3秒</td></tr></tbody></table><h4 id="composer配置"><a href="#composer配置" class="headerlink" title="composer配置"></a>composer配置</h4><blockquote><p>作为一名phper，composer是必须的。安装php的时候，会自己帮我们装上composer的。感谢阿里大大提供镜像源</p></blockquote><ul><li><a href="https://developer.aliyun.com/composer" target="_blank" rel="noopener">阿里云 Composer 全量镜像</a></li></ul><p>更新自己先：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># composer self-update</span><br><span class="line">Updating to version 1.9.0 (stable channel).</span><br><span class="line">   Downloading (100%)</span><br><span class="line">Use composer self-update --rollback to return to version 1.8.5</span><br></pre></td></tr></table></figure></div><p>全局更换源：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</span><br></pre></td></tr></table></figure></div><h4 id="测试开发环境"><a href="#测试开发环境" class="headerlink" title="测试开发环境"></a>测试开发环境</h4><ol><li>网站</li><li>添加站点</li><li>域名，根目录，php版本</li><li>宿主机host文件修改</li><li>访问域名</li><li>bingo，成功</li><li>宝塔的功能还需要自己去实验实验就好了</li></ol><h2 id="box打包"><a href="#box打包" class="headerlink" title="box打包"></a>box打包</h2><blockquote><p>这就是方便之处，只要你配置好了一次，再打包成自己的box镜像，那么下次开箱即用</p></blockquote><p>在开发环境的目录，关闭centos7</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant halt </span><br><span class="line">&#x3D;&#x3D;&gt; default: Attempting graceful shutdown of VM...</span><br></pre></td></tr></table></figure></div><p>确认centos7关机</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant status</span><br><span class="line">Current machine states:</span><br><span class="line"></span><br><span class="line">default                   poweroff (virtualbox)</span><br><span class="line"></span><br><span class="line">The VM is powered off. To restart the VM, simply run &#96;vagrant up&#96;</span><br></pre></td></tr></table></figure></div><p>打包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant package --output centos7-20190820.box</span><br><span class="line">&#x3D;&#x3D;&gt; default: Clearing any previously set forwarded ports...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Exporting VM...</span><br><span class="line">&#x3D;&#x3D;&gt; default: Compressing package to: E:&#x2F;work&#x2F;box&#x2F;centos7-20190820.box</span><br></pre></td></tr></table></figure></div><p>分发发去给其他人用的时候只需要</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、vagrant box add [box名称] [下载的box文件路径]</span><br><span class="line">2、vagrant init</span><br><span class="line">3、修改Vagrantfile配置</span><br><span class="line">4、vagrant up 开箱即用</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="分享" scheme="https://blog.lihq.xyz/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="tools" scheme="https://blog.lihq.xyz/tags/tools/"/>
    
  </entry>
  
</feed>
